{"version":3,"sources":["../../src/constants.ts","../../src/utils.ts","../../src/interceptor-manager.ts","../../src/errors/fetch-error.ts","../../src/errors/response-error.ts","../../src/timeout-wheel.ts","../../src/inflight-manager.ts","../../src/hash.ts","../../src/revalidator-manager.ts","../../src/pubsub-manager.ts","../../src/config-handler.ts","../../src/cache-manager.ts","../../src/response-parser.ts","../../src/retry-handler.ts","../../src/polling-handler.ts","../../src/error-handler.ts","../../src/request-handler.ts","../../src/api-handler.ts"],"names":["APPLICATION_CONTENT_TYPE","APPLICATION_JSON","CHARSET_UTF_8","CONTENT_TYPE","UNDEFINED","OBJECT","STRING","FUNCTION","ABORT_ERROR","TIMEOUT_ERROR","GET","HEAD","REJECT","MAX_DEPTH","isSearchParams","data","isObject","value","sanitizeObject","obj","safeObj","sortObject","keys","sortedObj","i","len","key","appendQueryStringToUrl","baseUrl","queryString","appendQueryParams","url","params","encodedQueryString","s","encode","add","k","v","buildParams","prefix","depth","replaceUrlPathParams","urlPathParams","match","isAbsoluteUrl","timeNow","noop","isJSONSerializable","delayInvocation","ms","resolve","flattenData","processHeaders","headers","headersObject","isBrowser","isSlowConnection","conn","applyInterceptors","interceptors","args","interceptor","FetchError","message","request","response","ResponseError","WHEEL_SIZE","SECOND","MAX_WHEEL_MS","wheel","keyMap","position","timer","handleCallback","callback","result","addTimeout","cb","removeTimeout","seconds","slot","slotOrTimeout","inFlight","markInFlight","timeout","dedupeTime","isCancellable","isTimeoutEnabled","item","prevPromise","prevController","prevIsCancellable","controller","abortRequest","error","removeInFlight","setInFlightPromise","promise","getInFlightPromise","prevReq","hash","str","char","DEFAULT_TTL","revalidators","eventHandlers","revalidateAll","type","isStaleRevalidation","flagIndex","now","entry","revalidator","revalidate","removeRevalidators","removeEventHandler","removeRevalidator","addEventHandler","event","handler","addRevalidator","revalidatorFn","ttl","staleTime","bgRevalidatorFn","refetchOnFocus","refetchOnReconnect","listeners","ensureListenerSet","addListener","fn","removeListener","set","notifySubscribers","fns","subscribe","defaultTimeoutMs","defaultConfig","setDefaultConfig","customConfig","sanitized","getDefaultConfig","buildConfig","reqConfig","buildFetcherConfig","merged","mergeConfigs","requestConfig","method","body","setContentTypeIfNeeded","credentials","dynamicUrl","urlPath","baseURL","contentTypeValue","baseConfig","overrideConfig","mergedConfig","mergeConfig","mergeInterceptors","property","targetConfig","baseInterceptor","newInterceptor","baseArr","newArr","_cache","DELIMITER","MIN_LENGTH_TO_HASH","CACHE_KEY_SANITIZE_PATTERN","CACHE_KEY_HEADER_WHITELIST","generateCacheKey","config","cacheKeyCheck","headersString","bodyString","o","isCacheExpired","isCacheStale","getCache","setCache","deleteCache","time","ttlMs","removeExpired","mutate","newData","settings","updatedData","updatedResponse","updatedEntry","getCachedResponse","cacheKey","cacheTime","buster","isExpired","isStale","handleResponseCache","output","isError","skipCache","prevCacheKey","parseResponseData","contentType","mimeType","trimmed","prepareResponse","defaultResponse","mutatator","isNativeResponse","getMsFromHttpDate","dateString","getRetryAfterMs","extendedResponse","retryAfter","RATELIMIT_RESET","rateLimitResetAfter","rateLimitResetAt","withRetry","requestFn","retries","delay","backoff","maxDelay","retryOn","shouldRetry","attempt","waitTime","maxRetries","cfg","onRetry","getShouldStopRetrying","retryAfterMs","customDecision","withPolling","pollingInterval","shouldStopPolling","maxAttempts","pollingDelay","pollingAttempt","withErrorHandling","isCancelled","logger","strategy","enhanceError","inFlightResponse","fetchf","fetcherConfig","cancellable","isCacheEnabled","needsCacheKey","_cacheKey","cached","inflight","retryConfig","resetTimeout","doRequestOnce","onResponse","_error","baseRequest","requestWithErrorHandling","doRequestPromise","createApiFetcher","endpoints","handleNonImplemented","endpointName","apiHandler","endpointConfig","_endpointConfig","_target","prop"],"mappings":"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","file":"index.js","sourcesContent":["export const APPLICATION_CONTENT_TYPE = 'application/';\n\nexport const APPLICATION_JSON = APPLICATION_CONTENT_TYPE + 'json';\nexport const CHARSET_UTF_8 = 'charset=utf-8';\nexport const CONTENT_TYPE = 'Content-Type';\n\nexport const UNDEFINED = 'undefined';\nexport const OBJECT = 'object';\nexport const STRING = 'string';\nexport const FUNCTION = 'function';\n\nexport const ABORT_ERROR = 'AbortError';\nexport const TIMEOUT_ERROR = 'TimeoutError';\n\nexport const GET = 'GET';\nexport const HEAD = 'HEAD';\n\nexport const REJECT = 'reject';\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { FUNCTION, OBJECT, STRING, UNDEFINED } from './constants';\nimport type {\n  DefaultUrlParams,\n  HeadersObject,\n  QueryParams,\n  UrlPathParams,\n} from './types';\n\n// Prevent stack overflow with recursion depth limit\nconst MAX_DEPTH = 10;\n\nexport function isSearchParams(data: unknown): boolean {\n  return data instanceof URLSearchParams;\n}\n\n/**\n * Determines if a value is a non-null object.\n *\n * @param {any} value - The value to check.\n * @returns {boolean} - True if the value is a non-null object.\n */\nexport function isObject(value: any): value is Record<string, any> {\n  return value !== null && typeof value === OBJECT;\n}\n\n/**\n * Shallowly serializes an object by converting its key-value pairs into a string representation.\n * This function does not recursively serialize nested objects.\n *\n * @param obj - The object to serialize.\n * @returns A string representation of the object's top-level properties.\n */\nexport function shallowSerialize(obj: Record<string, any>): string {\n  let result = '';\n\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      result += key + ':' + obj[key];\n    }\n  }\n\n  return result;\n}\n\n/**\n * Removes properties that could lead to prototype pollution from an object.\n *\n * This function creates a shallow copy of the input object with dangerous\n * properties like '__proto__', 'constructor', and 'prototype' removed.\n *\n * @param obj - The object to sanitize\n * @returns A new object without dangerous properties\n */\nexport function sanitizeObject<T extends Record<string, any>>(obj: T): T {\n  const safeObj = { ...obj };\n\n  delete safeObj.__proto__;\n  delete (safeObj as any).constructor;\n  delete safeObj.prototype;\n\n  return safeObj;\n}\n\n/**\n * Sorts the keys of an object and returns a new object with sorted keys.\n *\n * This function is optimized for performance by minimizing the number of object operations\n * and using a single pass to create the sorted object.\n *\n * @param {Object} obj - The object to be sorted by keys.\n * @returns {Object} - A new object with keys sorted in ascending order.\n */\nexport function sortObject(obj: Record<string, any>): object {\n  const keys = Object.keys(obj);\n\n  keys.sort();\n\n  const sortedObj = {} as Record<string, string>;\n\n  for (let i = 0, len = keys.length; i < len; i++) {\n    const key = keys[i];\n\n    sortedObj[key] = obj[key];\n  }\n\n  return sortedObj;\n}\n\n/**\n * Appends a query string to a URL, ensuring proper handling of existing query parameters.\n *\n * @param baseUrl - The base URL to which the query string will be appended.\n * @param queryString - The encoded query string to append.\n * @returns The URL with the appended query string, or the original URL if no query string is provided.\n */\nfunction appendQueryStringToUrl(baseUrl: string, queryString: string): string {\n  if (!queryString) {\n    return baseUrl;\n  }\n\n  return baseUrl.includes('?')\n    ? `${baseUrl}&${queryString}`\n    : `${baseUrl}?${queryString}`;\n}\n\n/**\n * Appends query parameters to a given URL.\n *\n * @param {string} url - The base URL to which query parameters will be appended.\n * @param {QueryParams} params - An object containing the query parameters to append.\n * @returns {string} - The URL with the appended query parameters.\n */\nexport function appendQueryParams(url: string, params: QueryParams): string {\n  if (!params) {\n    return url;\n  }\n\n  // Check if `params` is an instance of URLSearchParams and bail early if it is\n  if (isSearchParams(params)) {\n    const encodedQueryString = params.toString();\n\n    return appendQueryStringToUrl(url, encodedQueryString);\n  }\n\n  // This is exact copy of what JQ used to do. It works much better than URLSearchParams\n  const s: string[] = [];\n  const encode = encodeURIComponent;\n  const add = (k: string, v: any) => {\n    v = typeof v === FUNCTION ? v() : v;\n    v = v === null ? '' : v === undefined ? '' : v;\n    s[s.length] = encode(k) + '=' + encode(v);\n  };\n\n  const buildParams = (prefix: string, obj: any, depth = 0) => {\n    // Stop recursion if maximum depth is reached\n    if (depth >= MAX_DEPTH) {\n      return s;\n    }\n\n    let i: number, len: number, key: string;\n\n    if (prefix) {\n      if (Array.isArray(obj)) {\n        for (i = 0, len = obj.length; i < len; i++) {\n          buildParams(\n            prefix + '[' + (typeof obj[i] === OBJECT && obj[i] ? i : '') + ']',\n            obj[i],\n            depth + 1,\n          );\n        }\n      } else if (isObject(obj)) {\n        for (key in obj) {\n          buildParams(prefix + '[' + key + ']', obj[key], depth + 1);\n        }\n      } else {\n        add(prefix, obj);\n      }\n    } else if (Array.isArray(obj)) {\n      for (i = 0, len = obj.length; i < len; i++) {\n        add(obj[i].name, obj[i].value);\n      }\n    } else {\n      for (key in obj) {\n        buildParams(key, obj[key], depth + 1);\n      }\n    }\n    return s;\n  };\n\n  const queryStringParts = buildParams('', params).join('&');\n\n  // Encode special characters as per RFC 3986, https://datatracker.ietf.org/doc/html/rfc3986\n  // This is for compatibility with server frameworks that expect the literal notation\n  const encodedQueryString = queryStringParts.replace(/%5B%5D/g, '[]'); // Keep '[]' for arrays\n\n  return appendQueryStringToUrl(url, encodedQueryString);\n}\n\n/**\n * Replaces dynamic URI parameters in a URL string with values from the provided `urlPathParams` object.\n * Parameters in the URL are denoted by `:<paramName>`, where `<paramName>` is a key in `urlPathParams`.\n *\n * @param {string} url - The URL string containing placeholders in the format `:<paramName>`.\n * @param {Object} urlPathParams - An object containing the parameter values to replace placeholders.\n * @param {string} urlPathParams.paramName - The value to replace the placeholder `:<paramName>` in the URL.\n * @returns {string} - The URL string with placeholders replaced by corresponding values from `urlPathParams`.\n */\nexport function replaceUrlPathParams(\n  url: string,\n  urlPathParams: UrlPathParams,\n): string {\n  if (!urlPathParams || url.indexOf(':') === -1) {\n    return url;\n  }\n\n  // Use a single RegExp and avoid unnecessary casts and function calls\n  // Precompute keys for faster lookup\n  const params = urlPathParams as DefaultUrlParams;\n\n  // Use a replacer function that avoids extra work\n  return url.replace(/:([a-zA-Z0-9_]+)/g, (match, key) => {\n    // Use hasOwnProperty for strict key existence check\n    if (Object.prototype.hasOwnProperty.call(params, key)) {\n      const value = params[key];\n\n      // Only replace if value is not undefined or null\n      if (value !== undefined && value !== null) {\n        return encodeURIComponent(String(value));\n      }\n    }\n\n    return match;\n  });\n}\n\n/**\n * Determines whether the provided URL is absolute.\n *\n * An absolute URL contains a scheme (e.g., \"http://\", \"https://\").\n *\n * @param url - The URL string to check.\n * @returns `true` if the URL is absolute, otherwise `false`.\n */\nexport function isAbsoluteUrl(url: string): boolean {\n  return url.includes('://');\n}\n\nexport const timeNow = () => Date.now();\n\nexport const noop = () => {};\n\n/**\n * Checks if a value is JSON serializable.\n *\n * JSON serializable values include:\n * - Primitive types: string, number, boolean, null\n * - Arrays\n * - Plain objects (i.e., objects without special methods)\n * - Values with a `toJSON` method\n *\n * @param {any} value - The value to check for JSON serializability.\n * @returns {boolean} - Returns `true` if the value is JSON serializable, otherwise `false`.\n */\nexport function isJSONSerializable(value: any): boolean {\n  const t = typeof value;\n\n  if (value === undefined || value === null) {\n    return false;\n  }\n\n  if (t === STRING || t === 'number' || t === 'boolean') {\n    return true;\n  }\n\n  if (Array.isArray(value)) {\n    return true;\n  }\n\n  if (\n    typeof globalThis !== UNDEFINED &&\n    typeof globalThis.Buffer !== UNDEFINED &&\n    globalThis.Buffer.isBuffer(value)\n  ) {\n    return false;\n  }\n\n  if (value instanceof Date || isSearchParams(value)) {\n    return false;\n  }\n\n  if (isObject(value)) {\n    const proto = Object.getPrototypeOf(value);\n\n    // Check if the prototype is `Object.prototype` (plain object)\n    if (proto === Object.prototype) {\n      return true;\n    }\n\n    // Check if the object has a toJSON method\n    if (typeof value.toJSON === FUNCTION) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport async function delayInvocation(ms: number): Promise<boolean> {\n  return new Promise((resolve) =>\n    setTimeout(() => {\n      return resolve(true);\n    }, ms),\n  );\n}\n\n/**\n * Recursively flattens the data object if it meets specific criteria.\n *\n * The method checks if the provided `data` is an object with exactly one property named `data`.\n * If so, it recursively flattens the `data` property. Otherwise, it returns the `data` as-is.\n *\n * @param {any} data - The data to be flattened. Can be of any type, including objects, arrays, or primitives.\n * @returns {any} - The flattened data if the criteria are met; otherwise, the original `data`.\n */\nexport function flattenData(data: any, depth = 0): any {\n  if (depth >= MAX_DEPTH) {\n    return data;\n  }\n\n  if (data && isObject(data) && typeof data.data !== UNDEFINED) {\n    return flattenData(data.data, depth + 1);\n  }\n\n  return data;\n}\n\n/**\n * Processes headers and returns them as a normalized object.\n *\n * Handles both `Headers` instances and plain objects. Normalizes header keys to lowercase\n * as per RFC 2616 section 4.2.\n *\n * @param headers - The headers to process. Can be an instance of `Headers`, a plain object,\n *                   or `null`. If `null`, an empty object is returned.\n * @returns {HeadersObject} - A normalized headers object with lowercase keys.\n */\nexport function processHeaders(\n  headers?: (HeadersObject & HeadersInit) | null | Headers,\n): HeadersObject {\n  if (!headers) {\n    return {};\n  }\n\n  const headersObject: HeadersObject = {};\n\n  // Handle Headers object with entries() method\n  if (headers instanceof Headers) {\n    headers.forEach((value, key) => {\n      headersObject[key] = value;\n    });\n  } else if (isObject(headers)) {\n    // Handle plain object\n    for (const [key, value] of Object.entries(headers)) {\n      // Normalize keys to lowercase as per RFC 2616 4.2\n      // https://datatracker.ietf.org/doc/html/rfc2616#section-4.2\n      headersObject[key.toLowerCase()] = value;\n    }\n  }\n\n  return headersObject;\n}\n\n/**\n * Determines if the current environment is a browser.\n *\n * @returns {boolean} - True if running in a browser environment, false otherwise.\n */\nexport function isBrowser(): boolean {\n  // For node and and some mobile frameworks like React Native, `add/removeEventListener` doesn't exist on window!\n  return (\n    typeof window !== UNDEFINED && typeof window.addEventListener === FUNCTION\n  );\n}\n\n/**\n * Detects if the user is on a slow network connection\n * @returns {boolean} True if connection is slow, false otherwise or if detection unavailable\n */\nexport const isSlowConnection = (): boolean => {\n  // Only works in browser environments\n  if (!isBrowser()) {\n    return false;\n  }\n\n  const conn = navigator && (navigator as any).connection;\n\n  return conn && ['slow-2g', '2g', '3g'].includes(conn.effectiveType);\n};\n","import { FUNCTION } from './constants';\nimport type { InterceptorFunction } from './types/interceptor-manager';\nimport { isObject } from './utils';\n\n/**\n * Applies interceptors to the object. Interceptors can be a single function or an array of functions.\n *\n * @template T - Type of the object.\n * @template Args - Type of additional arguments.\n * @template I - Type of interceptors.\n *\n * @param {InterceptorFunction<T, Args> | InterceptorFunction<T, Args>[]} [interceptors] - Interceptor function(s).\n * @param {T} data - The data object to process.\n * @param {...Args} args - Additional arguments to pass to interceptors.\n *\n * @returns {Promise<void>} - Nothing as the function is non-idempotent.\n */\nexport async function applyInterceptors<\n  T extends object,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Args extends any[] = any[],\n  I = InterceptorFunction<T, Args> | InterceptorFunction<T, Args>[],\n>(interceptors: I | undefined, data: T, ...args: Args): Promise<void> {\n  if (!interceptors) {\n    return;\n  }\n\n  if (typeof interceptors === FUNCTION) {\n    const value = await (interceptors as InterceptorFunction<T, Args>)(\n      data,\n      ...args,\n    );\n\n    if (value && isObject(data) && isObject(value)) {\n      Object.assign(data, value);\n    }\n  } else if (Array.isArray(interceptors)) {\n    for (const interceptor of interceptors) {\n      const value = await interceptor(data, ...args);\n\n      if (value && isObject(data) && isObject(value)) {\n        Object.assign(data, value);\n      }\n    }\n  }\n}\n","import type {\n  DefaultParams,\n  DefaultPayload,\n  DefaultResponse,\n  DefaultUrlParams,\n  FetchResponse,\n  RequestConfig,\n} from '../types';\n\n/**\n * This is a base error class\n */\nexport class FetchError<\n  ResponseData = DefaultResponse,\n  RequestBody = DefaultPayload,\n  QueryParams = DefaultParams,\n  PathParams = DefaultUrlParams,\n> extends Error {\n  status: number;\n  statusText: string;\n  config: RequestConfig<ResponseData, QueryParams, PathParams, RequestBody>;\n  isCancelled: boolean;\n\n  constructor(\n    message: string,\n    public request: RequestConfig<\n      ResponseData,\n      QueryParams,\n      PathParams,\n      RequestBody\n    >,\n    public response: FetchResponse<\n      ResponseData,\n      RequestBody,\n      QueryParams,\n      PathParams\n    > | null,\n  ) {\n    super(message);\n\n    this.name = 'FetchError';\n    this.status = response ? response.status : 0;\n    this.statusText = response ? response.statusText : '';\n    this.config = request;\n    this.isCancelled = false;\n  }\n}\n","import { FetchError } from './fetch-error';\nimport type {\n  DefaultParams,\n  DefaultPayload,\n  DefaultResponse,\n  DefaultUrlParams,\n  FetchResponse,\n  RequestConfig,\n} from '../types';\n\nexport class ResponseError<\n  ResponseData = DefaultResponse,\n  RequestBody = DefaultPayload,\n  QueryParams = DefaultParams,\n  PathParams = DefaultUrlParams,\n> extends FetchError<ResponseData, RequestBody, QueryParams, PathParams> {\n  constructor(\n    message: string,\n    request: RequestConfig<ResponseData, QueryParams, PathParams, RequestBody>,\n    response: FetchResponse<\n      ResponseData,\n      RequestBody,\n      QueryParams,\n      PathParams\n    > | null,\n  ) {\n    super(message, request, response);\n\n    this.name = 'ResponseError';\n  }\n}\n","/**\n * @module timeout-wheel\n * @description\n * Ultra-minimal timing wheel implementation optimized for max performance & many requests.\n * For most of the cases it's 4-100x faster than setTimeout and setInterval alone.\n * Provides efficient scheduling and cancellation of timeouts using a circular array.\n *\n * Position 0 → 1 → 2 → ... → 599 → 0 → 1 → 2 ...\n * Time:   0s   1s   2s        599s   600s 601s 602s\n *\n * The timing wheel consists of 600 slots (one per second for 10 min).\n * Each slot contains a list of timeout items, each associated with a unique key and callback.\n * Timeouts are scheduled by placing them in the appropriate slot based on the delay in seconds.\n * The wheel advances every second, executing and removing callbacks as their timeouts expire.\n * Defaults to setTimeout if the delay exceeds 10 minutes or is not divisible by 1000.\n *\n * @remarks\n * - Designed for minimal footprint and simplicity.\n * - Only supports second-level granularity (minimum timeout: 1 second).\n * - Automatically stops the internal timer when no timeouts remain.\n */\n\nimport { noop } from './utils';\n\ntype TimeoutCallback = () => unknown | Promise<unknown>;\ntype TimeoutItem = [string, TimeoutCallback]; // [key, callback]\n\nconst WHEEL_SIZE = 600; // 600 slots for 10 min (1 slot per second)\nconst SECOND = 1000; // 1 second in milliseconds\nconst MAX_WHEEL_MS = WHEEL_SIZE * SECOND;\nconst wheel: TimeoutItem[][] = Array(WHEEL_SIZE)\n  .fill(0)\n  .map(() => []);\n\nconst keyMap = new Map<string, number | [NodeJS.Timeout | number]>();\nlet position = 0;\nlet timer: NodeJS.Timeout | null = null;\n\nconst handleCallback = ([key, callback]: TimeoutItem): void => {\n  keyMap.delete(key);\n\n  try {\n    const result = callback();\n    if (result && result instanceof Promise) {\n      // Silently ignore async errors to prevent wheel from stopping\n      result.catch(noop);\n    }\n  } catch {\n    // Ignore callback errors to prevent wheel from stopping\n  }\n};\n\nexport const addTimeout = (\n  key: string,\n  cb: TimeoutCallback,\n  ms: number,\n): void => {\n  removeTimeout(key);\n\n  // Fallback to setTimeout if wheel size is exceeded or ms is not divisible by SECOND\n  if (ms > MAX_WHEEL_MS || ms % SECOND !== 0) {\n    keyMap.set(key, [setTimeout(handleCallback.bind(null, [key, cb]), ms)]); // Store timeout ID instead of slot\n\n    return;\n  }\n\n  // No need for Math.ceil here since ms is guaranteed by modulo above\n  const seconds = ms / SECOND;\n  const slot = (position + seconds) % WHEEL_SIZE;\n\n  wheel[slot].push([key, cb]);\n  keyMap.set(key, slot);\n\n  if (!timer) {\n    timer = setInterval(() => {\n      position = (position + 1) % WHEEL_SIZE;\n      wheel[position].forEach(handleCallback);\n      wheel[position] = [];\n\n      if (!keyMap.size && timer) {\n        clearInterval(timer);\n        timer = null;\n      }\n    }, SECOND);\n  }\n};\n\nexport const removeTimeout = (key: string): void => {\n  const slotOrTimeout = keyMap.get(key);\n\n  if (slotOrTimeout !== undefined) {\n    // It's a Timeout object from setTimeout\n    if (Array.isArray(slotOrTimeout)) {\n      clearTimeout(slotOrTimeout[0]);\n    } else {\n      wheel[slotOrTimeout].splice(\n        wheel[slotOrTimeout].findIndex(([k]) => k === key),\n        1,\n      );\n    }\n\n    keyMap.delete(key);\n\n    if (!keyMap.size && timer) {\n      clearInterval(timer);\n      timer = null;\n    }\n  }\n};\n\nexport const clearAllTimeouts = () => {\n  // Clear native setTimeout timeouts first!\n  keyMap.forEach((value) => {\n    if (Array.isArray(value)) {\n      clearTimeout(value[0]);\n    }\n  });\n\n  if (timer) {\n    clearInterval(timer);\n    timer = null;\n  }\n\n  keyMap.clear();\n  wheel.forEach((slot) => (slot.length = 0));\n  position = 0;\n};\n","/**\n * @module inflight-manager\n *\n * Manages in-flight asynchronous requests using unique keys to enable deduplication and cancellation.\n *\n * Provides utilities for:\n * - Deduplication of requests within a configurable time window (`dedupeTime`)\n * - Timeout management and automatic request abortion\n * - AbortController lifecycle and cancellation logic\n * - Concurrency control and request state tracking\n * - In-flight promise deduplication to prevent duplicate network calls\n *\n * @remarks\n * - Requests with the same key within the deduplication interval share the same AbortController and in-flight promise.\n * - Supports cancellation of previous requests when a new one with the same key is issued, if `isCancellable` is enabled.\n * - Timeout logic ensures requests are aborted after a specified duration, if enabled.\n * - Internal queue state is managed via a Map, keyed by request identifier.\n * - Polled requests are also marked as \"in-flight\" to prevent duplicate requests.\n */\n\nimport { ABORT_ERROR, TIMEOUT_ERROR } from './constants';\nimport { addTimeout, removeTimeout } from './timeout-wheel';\nimport { timeNow } from './utils';\n\nexport type InFlightItem = [\n  AbortController, // AbortController for the request\n  boolean, // Whether timeout is enabled for the request\n  number, // Timestamp when the request was marked in-flight\n  boolean, // isCancellable - whether the request can be cancelled\n  Promise<unknown> | null, // Optional in-flight promise for deduplication\n];\n\nconst inFlight: Map<string, InFlightItem> = new Map();\n\n/**\n * Adds a request to the queue if it's not already being processed within the dedupeTime interval.\n *\n * @param {string | null} key - Unique key for the request (e.g. cache key).\n * @param {string} url - The request URL (for error messages/timeouts).\n * @param {number} timeout - Timeout in milliseconds for the request.\n * @param {number} dedupeTime - Deduplication time in milliseconds.\n * @param {boolean} isCancellable - If true, then the previous request with same configuration should be aborted.\n * @param {boolean} isTimeoutEnabled - Whether timeout is enabled.\n * @returns {AbortController} - A promise that resolves to an AbortController.\n */\nexport function markInFlight(\n  key: string | null,\n  url: string,\n  timeout: number | undefined,\n  dedupeTime: number,\n  isCancellable: boolean,\n  isTimeoutEnabled: boolean,\n): AbortController {\n  if (!key) {\n    return new AbortController();\n  }\n\n  const item = inFlight.get(key);\n  let prevPromise: Promise<unknown> | null = null;\n\n  // Previous request is in-flight, check if we can reuse it\n  if (item) {\n    const prevController = item[0];\n    const prevIsCancellable = item[3];\n\n    // If the request is already in the queue and within the dedupeTime, reuse the existing controller\n    if (\n      !prevIsCancellable &&\n      timeNow() - item[2] < dedupeTime &&\n      !prevController.signal.aborted\n    ) {\n      return prevController;\n    }\n\n    // If the request is too old, remove it and proceed to add a new one\n    // Abort previous request, if applicable, and continue as usual\n    if (prevIsCancellable) {\n      prevController.abort(\n        new DOMException('Aborted due to new request', ABORT_ERROR),\n      );\n    }\n\n    removeTimeout(key);\n    prevPromise = item[4];\n  }\n\n  const controller = new AbortController();\n\n  inFlight.set(key, [\n    controller,\n    isTimeoutEnabled,\n    timeNow(),\n    isCancellable,\n    prevPromise,\n  ]);\n\n  if (isTimeoutEnabled) {\n    addTimeout(\n      key,\n      () => {\n        abortRequest(\n          key,\n          new DOMException(url + ' aborted due to timeout', TIMEOUT_ERROR),\n        );\n      },\n      timeout as number,\n    );\n  }\n\n  return controller;\n}\n\n/**\n * Removes a request from the queue and clears its timeout.\n *\n * @param key - Unique key for the request.\n * @param {boolean} error - Optional error to abort the request with. If null, the request is simply removed but no abort sent.\n * @returns {Promise<void>} - A promise that resolves when the request is aborted and removed.\n */\nexport async function abortRequest(\n  key: string | null,\n  error: DOMException | null | string = null,\n): Promise<void> {\n  // If the key is not in the queue, there's nothing to remove\n  if (key) {\n    const item = inFlight.get(key);\n\n    if (item) {\n      // If the request is not yet aborted, abort it with the provided error\n      if (error) {\n        const controller = item[0];\n        controller.abort(error);\n      }\n\n      removeInFlight(key);\n    }\n  }\n}\n\n/**\n * Removes a request from the in-flight queue without aborting or clearing timeout.\n *\n * @param key - Unique key for the request.\n */\nexport function removeInFlight(key: string | null): void {\n  removeTimeout(key!);\n  inFlight.delete(key!);\n}\n\n/**\n * Gets the AbortController for a request key.\n *\n * @param key - Unique key for the request.\n * @returns {AbortController | undefined} - The AbortController or undefined.\n */\nexport async function getController(\n  key: string,\n): Promise<AbortController | undefined> {\n  const item = inFlight.get(key);\n\n  return item?.[0];\n}\n\n/**\n * Adds helpers for in-flight promise deduplication.\n *\n * @param key - Unique key for the request.\n * @param promise - The promise to store.\n */\nexport function setInFlightPromise(\n  key: string,\n  promise: Promise<unknown>,\n): void {\n  const item = inFlight.get(key);\n  if (item) {\n    // store the promise at index 4\n    item[4] = promise;\n\n    inFlight.set(key, item);\n  }\n}\n\n/**\n * Retrieves the in-flight promise for a request key if it exists and is within the dedupeTime interval.\n *\n * @param key - Unique key for the request.\n * @param dedupeTime - Deduplication time in milliseconds.\n * @returns {Promise<T> | null} - The in-flight promise or null.\n */\nexport function getInFlightPromise<T = unknown>(\n  key: string | null,\n  dedupeTime: number,\n): Promise<T> | null {\n  if (!key) {\n    return null;\n  }\n\n  const prevReq = inFlight.get(key);\n\n  if (\n    prevReq &&\n    // If the request is in-flight and has a promise\n    prevReq[4] &&\n    // If the request is cancellable, we will not reuse it\n    !prevReq[3] &&\n    // If the request is within the dedupeTime\n    timeNow() - prevReq[2] < dedupeTime &&\n    // If one request is cancelled, ALL deduped requests get cancelled\n    !prevReq[0].signal.aborted\n  ) {\n    return prevReq[4] as Promise<T>;\n  }\n\n  return null;\n}\n","const PRIME_MULTIPLIER = 31;\n\n/**\n * Computes a hash value for a given string using the variant of djb2 hash function.\n * This hash function is non-cryptographic and designed for speed.\n * @author Daniel J. Bernstein (of djb2)\n *\n * @param str Input string to hash\n * @returns {string} Hash\n */\nexport function hash(str: string): string {\n  let hash = 0;\n\n  for (let i = 0, len = str.length; i < len; i++) {\n    const char = str.charCodeAt(i);\n    hash = (hash * PRIME_MULTIPLIER + char) | 0;\n  }\n\n  return String(hash);\n}\n","/**\n * @module revalidator-manager\n *\n * Provides utilities for managing cache revalidation functions, including:\n * - Registering and unregistering revalidators for specific cache keys.\n * - Triggering revalidation for a given key.\n * - Enabling or disabling automatic revalidation on window focus and if user comes back online for specific keys.\n * - Attaching and removing global focus and online event handlers to trigger revalidation.\n *\n * Revalidators are functions that can be registered to revalidate cache entries when needed.\n * They are typically used to refresh data in the cache when the window gains focus or when specific actions occur.\n * @performance O(1) lookup by key makes it blazing fast to register, unregister, and revalidate cache entries.\n * - Designed for high performance: minimizes unnecessary re-renders and leverages fast cache key generation.\n * - Integrates with a global cache and pub/sub system for efficient state updates across contexts.\n * - Handles automatic revalidation, deduplication, retries, and cache management out of the box.\n * @remarks\n * - Designed to be used in various environments (Deno, Node.js, Bun, Browser, etc.) to ensure cache consistency and freshness.\n */\nimport { addTimeout, removeTimeout } from './timeout-wheel';\nimport { FetchResponse } from './types';\nimport { isBrowser, noop, timeNow } from './utils';\n\nexport type RevalidatorFn = (\n  isStaleRevalidation?: boolean,\n) => Promise<FetchResponse | null>;\n\ntype EventType = 'focus' | 'online';\n\ntype RevalidatorEntry = [\n  RevalidatorFn, // main revalidator\n  number, // lastUsed\n  number, // ttl\n  number?, // staleTime\n  RevalidatorFn?, // bgRevalidator\n  boolean?, // refetchOnFocus\n  boolean?, // refetchOnReconnect\n];\n\nconst DEFAULT_TTL = 3 * 60 * 1000; // Default TTL of 3 minutes\nconst revalidators = new Map<string, RevalidatorEntry>();\n\n/**\n * Stores global event handlers for cache revalidation events (e.g., focus, online).\n * This avoids attaching multiple event listeners by maintaining a single handler per event type.\n * Event handlers are registered as needed when revalidators are registered with the corresponding flags.\n * @remarks\n * - Improves performance by reducing the number of event listeners.\n * - Enables efficient O(1) lookup and management of event handlers for revalidation.\n */\nconst eventHandlers = new Map<string, () => void>();\n\n/**\n * Triggers revalidation for all registered entries based on the given event type.\n * For example, if it's a 'focus' event, it will revalidate entries that have the `refetchOnFocus` flag set.\n * Updates the timestamp and invokes the revalidator function for each applicable entry.\n *\n * @param type - The type of event that caused the revalidation (e.g., 'focus' or 'online').\n * @param isStaleRevalidation - If `true`, uses background revalidator and doesn't mark as in-flight.\n */\nexport function revalidateAll(\n  type: EventType,\n  isStaleRevalidation: boolean = true,\n) {\n  const flagIndex = type === 'focus' ? 5 : 6;\n  const now = timeNow();\n\n  revalidators.forEach((entry) => {\n    if (!entry[flagIndex]) {\n      return;\n    }\n\n    entry[1] = now;\n\n    // If it's a stale revalidation, use the background revalidator function\n    const revalidator = isStaleRevalidation ? entry[4] : entry[0];\n\n    if (revalidator) {\n      Promise.resolve(revalidator(isStaleRevalidation)).catch(noop);\n    }\n  });\n}\n\n/**\n * Revalidates an entry by executing the registered revalidation function.\n *\n * @param key The unique identifier for the cache entry to revalidate. If `null`, no revalidation occurs.\n * @param isStaleRevalidation - If `true`, it does not mark revalidated requests as in-flight.\n * @returns A promise that resolves to the result of the revalidator function, or\n *          `null` if no key or revalidator is found, or a `FetchResponse` if applicable.\n */\nexport async function revalidate<T = unknown>(\n  key: string | null,\n  isStaleRevalidation: boolean = false,\n): Promise<T | null | FetchResponse> {\n  // If no key is provided, no revalidation occurs\n  if (!key) {\n    return null;\n  }\n\n  const entry = revalidators.get(key);\n\n  if (entry) {\n    // Update only the lastUsed timestamp without resetting the whole array\n    entry[1] = timeNow();\n\n    const revalidator = isStaleRevalidation ? entry[4] : entry[0];\n\n    // If no revalidator function is registered, return null\n    if (revalidator) {\n      return await revalidator(isStaleRevalidation);\n    }\n  }\n\n  // If no revalidator is registered for the key, return null\n  return null;\n}\n\n/**\n * Removes all revalidators associated with the specified event type.\n *\n * @param type - The event type whose revalidators should be removed.\n */\nexport function removeRevalidators(type: EventType) {\n  removeEventHandler(type);\n\n  const flagIndex = type === 'focus' ? 5 : 6;\n\n  // Clear all revalidators with this flag\n  revalidators.forEach((entry, key) => {\n    if (entry[flagIndex]) {\n      removeRevalidator(key);\n    }\n  });\n}\n\n/**\n * Registers a generic revalidation event handler for the specified event type.\n * Ensures the handler is only added once and only in browser environments.\n *\n * @param event - The type of event to listen for (e.g., 'focus', 'visibilitychange').\n */\nfunction addEventHandler(event: EventType) {\n  if (!isBrowser() || eventHandlers.has(event)) {\n    return;\n  }\n\n  const handler = revalidateAll.bind(null, event, true);\n\n  eventHandlers.set(event, handler);\n  window.addEventListener(event, handler);\n}\n\n/**\n * Removes the generic event handler for the specified event type from the window object.\n *\n * @param event - The type of event whose handler should be removed.\n */\nfunction removeEventHandler(event: EventType) {\n  if (!isBrowser()) {\n    return;\n  }\n\n  const handler = eventHandlers.get(event);\n\n  if (handler) {\n    window.removeEventListener(event, handler);\n\n    eventHandlers.delete(event);\n  }\n}\n\n/**\n * Registers a revalidation functions for a specific cache key.\n *\n * @param {string} key Cache key to utilize\n * @param {RevalidatorFn} revalidatorFn Main revalidation function (marks in-flight requests)\n * @param {number} [ttl] Time to live in milliseconds (default: 3 minutes)\n * @param {number} [staleTime] Time (in seconds) after which the cache entry is considered stale\n * @param {RevalidatorFn} [bgRevalidatorFn] For stale revalidation (does not mark in-flight requests)\n * @param {boolean} [refetchOnFocus] Whether to revalidate on window focus\n * @param {boolean} [refetchOnReconnect] Whether to revalidate on network reconnect\n */\nexport function addRevalidator(\n  key: string,\n  revalidatorFn: RevalidatorFn, // Main revalidation function (marks in-flight requests)\n  ttl?: number,\n  staleTime?: number,\n  bgRevalidatorFn?: RevalidatorFn, // For stale revalidation (does not mark in-flight requests)\n  refetchOnFocus?: boolean,\n  refetchOnReconnect?: boolean,\n) {\n  revalidators.set(key, [\n    revalidatorFn,\n    timeNow(),\n    ttl ?? DEFAULT_TTL,\n    staleTime,\n    bgRevalidatorFn,\n    refetchOnFocus,\n    refetchOnReconnect,\n  ]);\n\n  if (refetchOnFocus) {\n    addEventHandler('focus');\n  }\n\n  if (refetchOnReconnect) {\n    addEventHandler('online');\n  }\n\n  if (staleTime) {\n    addTimeout('s:' + key, revalidate.bind(null, key, true), staleTime * 1000);\n  }\n}\n\nexport function removeRevalidator(key: string) {\n  revalidators.delete(key);\n\n  // Clean up stale timer\n  removeTimeout('s:' + key);\n}\n\n/**\n * Periodically cleans up expired revalidators from the registry.\n * Removes any revalidator whose TTL has expired.\n *\n * @param {number} intervalMs How often to run cleanup (default: 3 minutes)\n * @returns {() => void} A function to stop the periodic cleanup\n */\nexport function startRevalidatorCleanup(\n  intervalMs: number = DEFAULT_TTL,\n): () => void {\n  const intervalId = setInterval(() => {\n    const now = timeNow();\n\n    revalidators.forEach(\n      ([, lastUsed, ttl, , , refetchOnFocus, refetchOnReconnect], key) => {\n        // Skip focus-only or reconnect-only revalidators to keep them alive\n        if (refetchOnFocus || refetchOnReconnect) {\n          return;\n        }\n\n        if (ttl > 0 && now - lastUsed > ttl) {\n          removeRevalidator(key);\n        }\n      },\n    );\n  }, intervalMs);\n\n  return () => clearInterval(intervalId);\n}\n","/**\n * Manages a set of listeners (subscribers) for arbitrary string keys, allowing cross-context or cross-component\n * cache updates and synchronization. Provides functions to add, remove, and notify listeners, as well as a\n * convenient subscribe/unsubscribe API.\n *\n * @template T - The type of the response object passed to listeners.\n *\n * @remarks\n * - Listeners are grouped by a string key, which typically represents a cache key or resource identifier.\n * - When `notifySubscribers` is called for a key, all listeners registered for that key are invoked with the provided response.\n * - The `subscribe` function returns an unsubscribe function for convenient cleanup.\n *\n * @example\n * ```ts\n * const unsubscribe = subscribe('user:123', (response) => {\n *   // handle updated data\n * });\n * // Later, to stop listening:\n * unsubscribe();\n * ```\n */\n\nimport { noop } from './utils';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Listener<T = any> = (response: T) => void;\n\nconst listeners = new Map<string, Set<Listener>>();\n\nfunction ensureListenerSet(key: string) {\n  if (!listeners.has(key)) {\n    listeners.set(key, new Set());\n  }\n\n  return listeners.get(key)!;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function addListener<T = any>(key: string, fn: Listener<T>): void {\n  ensureListenerSet(key).add(fn);\n}\n\nexport function removeListener<T>(key: string, fn: Listener<T>) {\n  const set = listeners.get(key);\n\n  if (set) {\n    set.delete(fn);\n\n    // If the set is empty, remove the key from the listeners map\n    if (set.size === 0) {\n      listeners.delete(key);\n    }\n  }\n}\n\nexport function notifySubscribers<T>(key: string, response: T) {\n  const fns = listeners.get(key);\n\n  if (fns) {\n    if (fns.size === 1) {\n      // If there's only one listener, call it directly\n      const fn = fns.values().next().value;\n      fn!(response);\n    } else {\n      fns.forEach((fn) => fn(response));\n    }\n  }\n}\n\nexport function subscribe<T>(key: string | null, fn: (response: T) => void) {\n  if (!key) {\n    // No op if no key is provided\n    return noop;\n  }\n\n  addListener<T>(key, fn);\n\n  // Return an unsubscribe function\n  return () => {\n    removeListener(key, fn);\n  };\n}\n","import {\n  GET,\n  APPLICATION_JSON,\n  HEAD,\n  STRING,\n  CHARSET_UTF_8,\n  CONTENT_TYPE,\n  REJECT,\n  UNDEFINED,\n  APPLICATION_CONTENT_TYPE,\n} from './constants';\nimport type {\n  HeadersObject,\n  Method,\n  RequestConfig,\n} from './types/request-handler';\nimport {\n  replaceUrlPathParams,\n  appendQueryParams,\n  isSearchParams,\n  isJSONSerializable,\n  isSlowConnection,\n  isAbsoluteUrl,\n  sanitizeObject,\n  isObject,\n} from './utils';\n\nconst defaultTimeoutMs = (isSlowConnection() ? 60 : 30) * 1000;\n\nexport const defaultConfig: RequestConfig = {\n  strategy: REJECT,\n  timeout: defaultTimeoutMs, // 30 seconds (60 on slow connections)\n  headers: {\n    Accept: APPLICATION_JSON + ', text/plain, */*',\n    'Accept-Encoding': 'gzip, deflate, br',\n  },\n  retry: {\n    delay: defaultTimeoutMs / 30, // 1 second (2 on slow connections)\n    maxDelay: defaultTimeoutMs, // 30 seconds (60 on slow connections)\n    resetTimeout: true,\n    backoff: 1.5,\n\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n    retryOn: [\n      408, // Request Timeout\n      409, // Conflict\n      425, // Too Early\n      429, // Too Many Requests\n      500, // Internal Server Error\n      502, // Bad Gateway\n      503, // Service Unavailable\n      504, // Gateway Timeout\n    ],\n  },\n};\n\n/**\n * Overwrites the default configuration with the provided custom configuration.\n *\n * @param {Partial<RequestConfig>} customConfig - The custom configuration to merge into the default config.\n * @returns {Partial<RequestConfig>} - The updated default configuration object.\n */\nexport function setDefaultConfig(\n  customConfig: Partial<RequestConfig>,\n): Partial<RequestConfig> {\n  const sanitized = sanitizeObject(customConfig);\n\n  Object.assign(defaultConfig, sanitized);\n\n  return defaultConfig;\n}\n\n/**\n * Returns a shallow copy of the current default configuration.\n *\n * @returns {RequestConfig} - The current default configuration.\n */\nexport function getDefaultConfig(): RequestConfig {\n  return { ...defaultConfig };\n}\n\n/**\n * Build request configuration from defaults and overrides.\n * This function merges the default configuration with the provided request configuration,\n * @param {string} url - Request url\n * @param {RequestConfig<ResponseData, QueryParams, PathParams, RequestBody> | null | undefined} reqConfig - Request configuration\n * @return {RequestConfig<ResponseData, QueryParams, PathParams, RequestBody>} - Merged request configuration\n */\nexport function buildConfig<ResponseData, RequestBody, QueryParams, PathParams>(\n  url: string,\n  reqConfig?: RequestConfig<\n    ResponseData,\n    QueryParams,\n    PathParams,\n    RequestBody\n  > | null,\n): RequestConfig<ResponseData, QueryParams, PathParams, RequestBody> {\n  if (!reqConfig) {\n    return buildFetcherConfig(url, getDefaultConfig());\n  }\n\n  const sanitized = sanitizeObject(reqConfig);\n  const merged = mergeConfigs(defaultConfig, sanitized);\n\n  return buildFetcherConfig(url, merged);\n}\n\n/**\n * Builds the fetcher configuration by setting the method, body, headers, and URL.\n * It also handles query parameters and path parameters. This fn mutates the passed `requestConfig` object.\n * @param {string} url - The endpoint URL to which the request will be sent.\n * @param {RequestConfig} requestConfig - The request configuration object containing method, body, headers, and other options.\n * @return {RequestConfig} - The modified request configuration object with the URL, method, body, and headers set appropriately.\n **/\nexport function buildFetcherConfig(\n  url: string,\n  requestConfig: RequestConfig,\n): RequestConfig {\n  let method = requestConfig.method as Method;\n  method = method ? (method.toUpperCase() as Method) : GET;\n\n  let body: RequestConfig['data'] | undefined;\n\n  // Only applicable for request methods 'PUT', 'POST', 'DELETE', and 'PATCH'\n  if (method !== GET && method !== HEAD) {\n    body = requestConfig.body ?? requestConfig.data;\n\n    // Automatically stringify request body, if possible and when not dealing with strings\n    if (body && typeof body !== STRING && isJSONSerializable(body)) {\n      body = JSON.stringify(body);\n    }\n  }\n\n  setContentTypeIfNeeded(requestConfig.headers, body);\n\n  // Native fetch compatible settings\n  const credentials = requestConfig.withCredentials\n    ? 'include'\n    : requestConfig.credentials;\n\n  // The explicitly passed query params\n  const dynamicUrl = replaceUrlPathParams(url, requestConfig.urlPathParams);\n  const urlPath = appendQueryParams(dynamicUrl, requestConfig.params);\n  const isFullUrl = isAbsoluteUrl(url);\n  const baseURL = isFullUrl\n    ? ''\n    : requestConfig.baseURL || requestConfig.apiUrl || '';\n\n  requestConfig.url = baseURL + urlPath;\n  requestConfig.method = method;\n  requestConfig.credentials = credentials;\n  requestConfig.body = body;\n\n  return requestConfig;\n}\n\n/**\n * Ensures the `Content-Type` header is set to `application/json; charset=utf-8`\n * if it is not already present and the request method and body meet specific conditions.\n *\n * @param headers - The headers object to modify. Can be an instance of `Headers`\n *                  or a plain object conforming to `HeadersInit`.\n * @param body - The optional body of the request. If no body is provided and the\n *               method is 'GET' or 'HEAD', the function exits without modifying headers.\n */\nfunction setContentTypeIfNeeded(\n  headers?: HeadersInit | HeadersObject,\n  body?: unknown,\n): void {\n  // If no headers are provided, or if the body is not set and the method is PUT or DELETE, do nothing\n  if (!headers || !body) {\n    return;\n  }\n\n  // Types that should not have Content-Type set (browser handles these)\n  if (\n    body instanceof FormData || // Browser automatically sets multipart/form-data with boundary\n    (typeof Blob !== UNDEFINED && body instanceof Blob) || // Blob/File already have their own MIME types, don't override\n    (typeof File !== UNDEFINED && body instanceof File) ||\n    (typeof ReadableStream !== UNDEFINED && body instanceof ReadableStream) // Stream type should be determined by the stream source\n  ) {\n    return;\n  }\n\n  let contentTypeValue: string;\n\n  if (isSearchParams(body)) {\n    contentTypeValue = APPLICATION_CONTENT_TYPE + 'x-www-form-urlencoded';\n  } else if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {\n    contentTypeValue = APPLICATION_CONTENT_TYPE + 'octet-stream';\n  } else if (isJSONSerializable(body)) {\n    contentTypeValue = APPLICATION_JSON + ';' + CHARSET_UTF_8;\n  } else {\n    // Do not set Content-Type if content is not recognizable\n    return;\n  }\n\n  if (headers instanceof Headers) {\n    if (!headers.has(CONTENT_TYPE)) {\n      headers.set(CONTENT_TYPE, contentTypeValue);\n    }\n  } else if (\n    isObject(headers) &&\n    !Array.isArray(headers) &&\n    !headers[CONTENT_TYPE]\n  ) {\n    headers[CONTENT_TYPE] = contentTypeValue;\n  }\n}\n\nexport function mergeConfigs(\n  baseConfig: RequestConfig,\n  overrideConfig: RequestConfig,\n): RequestConfig {\n  const mergedConfig: RequestConfig = Object.assign(\n    {},\n    baseConfig,\n    overrideConfig,\n  );\n\n  // Ensure that retry and headers are merged correctly\n  mergeConfig('retry', mergedConfig, baseConfig, overrideConfig);\n  mergeConfig('headers', mergedConfig, baseConfig, overrideConfig);\n\n  // Merge interceptors efficiently\n  mergeInterceptors('onRequest', mergedConfig, baseConfig, overrideConfig);\n  mergeInterceptors('onResponse', mergedConfig, baseConfig, overrideConfig);\n  mergeInterceptors('onError', mergedConfig, baseConfig, overrideConfig);\n\n  return mergedConfig;\n}\n\n/**\n * Efficiently merges interceptor functions from base and new configs\n */\nfunction mergeInterceptors<\n  K extends 'onRequest' | 'onResponse' | 'onError' | 'onRetry',\n>(\n  property: K,\n  targetConfig: RequestConfig,\n  baseConfig: RequestConfig,\n  overrideConfig: RequestConfig,\n): void {\n  const baseInterceptor = baseConfig[property];\n  const newInterceptor = overrideConfig[property];\n\n  if (!baseInterceptor && !newInterceptor) {\n    return;\n  }\n\n  if (!baseInterceptor) {\n    targetConfig[property] = newInterceptor;\n    return;\n  }\n\n  if (!newInterceptor) {\n    targetConfig[property] = baseInterceptor;\n    return;\n  }\n\n  const baseArr = Array.isArray(baseInterceptor)\n    ? baseInterceptor\n    : [baseInterceptor];\n  const newArr = Array.isArray(newInterceptor)\n    ? newInterceptor\n    : [newInterceptor];\n\n  // This is the only LIFO interceptor, so we apply it after the response is prepared\n  targetConfig[property] =\n    property === 'onResponse' ? newArr.concat(baseArr) : baseArr.concat(newArr);\n}\n\n/**\n * Merges the specified property from the base configuration and the override configuration into the target configuration.\n *\n * @param {K} property - The property key to merge from the base and override configurations. Must be a key of RequestConfig.\n * @param {RequestConfig} targetConfig - The configuration object that will receive the merged properties.\n * @param {RequestConfig} baseConfig - The base configuration object that provides default values.\n * @param {RequestConfig} overrideConfig - The override configuration object that contains user-specific settings to merge.\n */\nexport function mergeConfig<K extends keyof RequestConfig>(\n  property: K,\n  targetConfig: RequestConfig,\n  baseConfig: RequestConfig,\n  overrideConfig: RequestConfig,\n): void {\n  if (overrideConfig[property]) {\n    targetConfig[property] = {\n      ...baseConfig[property],\n      ...overrideConfig[property],\n    };\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { hash } from './hash';\nimport type {\n  CacheKeyFunction,\n  DefaultResponse,\n  FetchResponse,\n  MutationSettings,\n  RequestConfig,\n} from './types/request-handler';\nimport type { CacheEntry } from './types/cache-manager';\nimport { GET, STRING, UNDEFINED } from './constants';\nimport { isObject, sanitizeObject, sortObject, timeNow } from './utils';\nimport { revalidate } from './revalidator-manager';\nimport { notifySubscribers } from './pubsub-manager';\nimport type { DefaultPayload, DefaultParams, DefaultUrlParams } from './types';\nimport { removeInFlight } from './inflight-manager';\nimport { addTimeout } from './timeout-wheel';\nimport { defaultConfig } from './config-handler';\nimport { processHeaders } from './utils';\n\nexport const IMMEDIATE_DISCARD_CACHE_TIME = 0; // Use it for cache entries that need to be persistent until unused by components or manually deleted\n\nconst _cache = new Map<string, CacheEntry<any>>();\nconst DELIMITER = '|';\nconst MIN_LENGTH_TO_HASH = 64;\nconst CACHE_KEY_SANITIZE_PATTERN = new RegExp('[^\\\\w\\\\-_|]', 'g');\n\n/**\n * Headers that may affect HTTP response content and should be included in cache key generation.\n * All header names must be lowercase to match normalized request headers.\n */\nconst CACHE_KEY_HEADER_WHITELIST = new Set([\n  // Content negotiation\n  'accept', // Affects response format (e.g. JSON, HTML)\n  'accept-language', // Affects localization of the response\n  'accept-encoding', // Affects response compression (e.g. gzip, br)\n\n  // Authentication\n  'authorization', // Affects access to protected resources\n\n  // Request body metadata\n  'content-type', // Affects how the request body is interpreted\n\n  // Optional headers\n  'referer', // May influence behavior in some APIs\n  'origin', // Relevant in CORS or tenant-specific APIs\n  'user-agent', // Included only for reason if server returns client-specific content\n\n  // Cookies — only if server uses session-based responses\n  'cookie', // Can fragment cache heavily; use only if necessary\n\n  // Custom headers that may affect response content\n  'x-api-key', // Token-based access, often affects authorization\n  'x-requested-with', // AJAX requests (used historically for distinguishing frontend calls)\n  'x-client-id', // Per-client/partner identity; often used in multi-tenant APIs\n  'x-tenant-id', // Multi-tenant segmentation; often changes response per tenant\n  'x-user-id', // Explicit user context (less common, but may exist)\n\n  'x-app-version', // Used for version-specific behavior (e.g. mobile apps)\n  'x-feature-flag', // Controls feature rollout behavior server-side\n  'x-device-id', // Used when response varies per device/app instance\n  'x-platform', // e.g. 'ios', 'android', 'web' — used in apps that serve different content\n\n  'x-session-id', // Only if backend uses it to affect the response directly (rare)\n  'x-locale', // Sometimes used in addition to or instead of `accept-language`\n]);\n\n/**\n * Generates a unique cache key for a given URL and fetch options, ensuring that key factors\n * like method, headers, body, and other options are included in the cache key.\n * Headers and other objects are sorted by key to ensure consistent cache keys.\n *\n * @param {RequestConfig} config - The fetch options that may affect the request. The most important are:\n *   @property {string} [method=\"GET\"] - The HTTP method (GET, POST, etc.).\n *   @property {HeadersInit} [headers={}] - The request headers.\n *   @property {BodyInit | null} [body=\"\"] - The body of the request (only for methods like POST, PUT).\n *   @property {RequestCredentials} [credentials=\"same-origin\"] - Whether to include credentials (include, same-origin, omit).\n *   @property {RequestCache} [cache=\"default\"] - The cache mode (e.g., default, no-store, reload).\n * @returns {string} - A unique cache key string based on the provided options.\n *\n * @example\n * const cacheKey = generateCacheKey({\n *   url: 'https://api.example.com/data',\n *   method: 'POST',\n *   headers: { 'Content-Type': 'application/json' },\n *   body: JSON.stringify({ name: 'Alice' }),\n *   mode: 'cors',\n *   credentials: 'include',\n * });\n * console.log(cacheKey);\n */\nexport function generateCacheKey(\n  config: RequestConfig,\n  cacheKeyCheck = true,\n): string {\n  // This is super fast. Effectively a no-op if cacheKey is\n  // a string or a function that returns a string.\n  const key = config.cacheKey;\n\n  if (key && cacheKeyCheck) {\n    return typeof key === STRING\n      ? (key as string)\n      : (key as CacheKeyFunction)(config);\n  }\n\n  const {\n    url = '',\n    method = GET,\n    headers = null,\n    body = null,\n    credentials = 'same-origin',\n  } = config;\n\n  // Sort headers and body + convert sorted to strings for hashing purposes\n  // Native serializer is on avg. 3.5x faster than a Fast Hash or FNV-1a\n  let headersString = '';\n  if (headers) {\n    let obj: Record<string, string>;\n\n    if (headers instanceof Headers) {\n      obj = processHeaders(headers);\n    } else {\n      obj = headers as Record<string, string>;\n    }\n\n    // Filter headers to only include those that affect request identity\n    // Include only headers that affect request identity, not execution behavior\n    const keys = Object.keys(obj);\n    const len = keys.length;\n\n    // Sort keys manually for fastest deterministic output\n    if (len > 1) {\n      keys.sort();\n    }\n\n    let str = '';\n    for (let i = 0; i < len; ++i) {\n      if (CACHE_KEY_HEADER_WHITELIST.has(keys[i].toLowerCase())) {\n        str += keys[i] + ':' + obj[keys[i]] + ';';\n      }\n    }\n\n    headersString = hash(str);\n  }\n\n  // For GET requests, return early with shorter cache key\n  if (method === GET) {\n    return (\n      method +\n      DELIMITER +\n      url +\n      DELIMITER +\n      credentials +\n      DELIMITER +\n      headersString\n    ).replace(CACHE_KEY_SANITIZE_PATTERN, '');\n  }\n\n  let bodyString = '';\n  if (body) {\n    if (typeof body === STRING) {\n      bodyString = body.length < MIN_LENGTH_TO_HASH ? body : hash(body); // hash only if large\n    } else if (body instanceof FormData) {\n      body.forEach((value, key) => {\n        // Append key=value and '&' directly to the result\n        bodyString += key + '=' + value + '&';\n      });\n\n      if (bodyString.length > MIN_LENGTH_TO_HASH) {\n        bodyString = hash(bodyString);\n      }\n    } else if (\n      (typeof Blob !== UNDEFINED && body instanceof Blob) ||\n      (typeof File !== UNDEFINED && body instanceof File)\n    ) {\n      bodyString = 'BF' + body.size + body.type;\n    } else if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {\n      bodyString = 'AB' + body.byteLength;\n    } else {\n      const o = isObject(body)\n        ? JSON.stringify(sortObject(body))\n        : String(body);\n\n      bodyString = o.length > MIN_LENGTH_TO_HASH ? hash(o) : o;\n    }\n  }\n\n  // Concatenate all key parts into a cache key string\n  // Template literals are apparently slower\n  return (\n    method +\n    DELIMITER +\n    url +\n    DELIMITER +\n    credentials +\n    DELIMITER +\n    headersString +\n    DELIMITER +\n    bodyString\n  ).replace(CACHE_KEY_SANITIZE_PATTERN, ''); // Prevent cache poisoning by removal of anything that isn't letters, numbers, -, _, or |\n}\n\n/**\n * Checks if the cache entry is expired based on its timestamp and the expiry time.\n *\n * @param {CacheEntry<any>} entry - The cache entry to check.\n * @returns {boolean} - Returns true if the cache entry is expired, false otherwise.\n */\nfunction isCacheExpired(entry: CacheEntry<any>): boolean {\n  // No expiry time means the entry never expires\n  if (!entry.expiry) {\n    return false;\n  }\n\n  return timeNow() > entry.expiry;\n}\n\n/**\n * Checks if the cache entry is stale based on its timestamp and the stale time.\n *\n * @param {CacheEntry<any>} entry - The cache entry to check.\n * @returns {boolean} - Returns true if the cache entry is stale, false otherwise.\n */\nfunction isCacheStale(entry: CacheEntry<any>): boolean {\n  if (!entry.stale) {\n    return false;\n  }\n\n  return timeNow() > entry.stale;\n}\n\n/**\n * Retrieves a cached response from the internal cache using the provided key.\n *\n * @param key - The unique key identifying the cached entry. If null, returns null.\n * @returns The cached {@link FetchResponse} if found, otherwise null.\n */\nexport function getCacheData<\n  ResponseData,\n  RequestBody,\n  QueryParams,\n  PathParams,\n>(\n  key: string | null,\n): FetchResponse<ResponseData, RequestBody, QueryParams, PathParams> | null {\n  if (!key) {\n    return null;\n  }\n\n  const entry = _cache.get(key);\n\n  return entry ? entry.data : null;\n}\n\n/**\n * Retrieves a cache entry if it exists and is not expired.\n *\n * @param {string} key Cache key to utilize\n * @returns {CacheEntry<T> | null} - The cache entry if it exists and is not expired, null otherwise.\n */\nexport function getCache<ResponseData, RequestBody, QueryParams, PathParams>(\n  key: string | null,\n):\n  | CacheEntry<\n      FetchResponse<ResponseData, RequestBody, QueryParams, PathParams>\n    >\n  | null\n  | undefined {\n  return _cache.get(key as string);\n}\n\n/**\n * Sets a new cache entry or updates an existing one, with optional TTL (time-to-live).\n *\n * @param {string} key Cache key to utilize\n * @param {T} data - The data to be cached.\n * @param {number} [ttl] - Optional TTL in seconds. If not provided, the cache entry will not expire.\n * @param {number} [staleTime] - Optional stale time in seconds. If provided, the cache entry will be considered stale after this time.\n */\nexport function setCache<T = unknown>(\n  key: string,\n  data: T,\n  ttl?: number,\n  staleTime?: number,\n): void {\n  if (ttl === 0) {\n    deleteCache(key);\n    return;\n  }\n\n  const time = timeNow();\n  const ttlMs = ttl ? ttl * 1000 : 0;\n\n  _cache.set(key, {\n    data,\n    time,\n    stale: staleTime && staleTime > 0 ? time + staleTime * 1000 : staleTime,\n    expiry: ttl === -1 ? undefined : time + ttlMs,\n  });\n\n  if (ttlMs > 0) {\n    addTimeout(\n      'c:' + key,\n      () => {\n        deleteCache(key, true);\n      },\n      ttlMs,\n    );\n  }\n}\n\n/**\n * Invalidates (deletes) a cache entry.\n *\n * @param {string} key Cache key to utilize\n * @param {boolean} [removeExpired=false] - If true, only deletes the cache entry if it is expired or stale.\n */\nexport function deleteCache(key: string, removeExpired: boolean = false): void {\n  if (removeExpired) {\n    const entry = getCache(key);\n\n    // If the entry does not exist, or it is neither expired nor stale, do not delete\n    if (!entry || !isCacheExpired(entry)) {\n      return;\n    }\n  }\n\n  _cache.delete(key);\n}\n\n/**\n * Prunes the cache by removing entries that have expired based on the provided cache time.\n */\nexport function pruneCache(): void {\n  _cache.clear();\n}\n\n/**\n * Mutates a cache entry with new data and optionally revalidates it.\n *\n * @param {string | null} key Cache key to utilize. If null, no mutation occurs.\n * @param {ResponseData} newData - The new data to be cached.\n * @param {MutationSettings|undefined} settings - Mutation settings.\n */\nexport async function mutate<\n  ResponseData = DefaultResponse,\n  RequestBody = DefaultPayload,\n  QueryParams = DefaultParams,\n  PathParams = DefaultUrlParams,\n>(\n  key: string | null,\n  newData: ResponseData,\n  settings?: MutationSettings,\n): Promise<FetchResponse<\n  ResponseData,\n  RequestBody,\n  QueryParams,\n  PathParams\n> | null> {\n  // If no key is provided, do nothing\n  if (!key) {\n    return null;\n  }\n\n  const entry = getCache<ResponseData, RequestBody, QueryParams, PathParams>(\n    key,\n  );\n\n  if (!entry) {\n    return null;\n  }\n\n  const updatedData = isObject(newData) ? sanitizeObject(newData) : newData;\n\n  const updatedResponse = {\n    ...entry.data,\n    data: updatedData,\n  };\n\n  const updatedEntry = {\n    ...entry,\n    data: updatedResponse,\n  };\n\n  _cache.set(key, updatedEntry);\n  notifySubscribers(key, updatedResponse);\n\n  if (settings && settings.refetch) {\n    return await revalidate(key);\n  }\n\n  return null;\n}\n\n/**\n * Retrieves a cached response if available and valid, otherwise returns null.\n *\n * @template ResponseData - The type of the response data.\n * @template RequestBody - The type of the request body.\n * @template QueryParams - The type of the query parameters.\n * @template PathParams - The type of the path parameters.\n * @param {string | null} cacheKey - The cache key to look up.\n * @param {number | undefined} cacheTime - The maximum time to cache entry.\n * @param {RequestConfig<ResponseData, QueryParams, PathParams, RequestBody>} requestConfig - The fetcher configuration.\n * @returns {FetchResponse<ResponseData, RequestBody, QueryParams, PathParams> | null} - The cached response or null.\n */\nexport function getCachedResponse<\n  ResponseData,\n  RequestBody,\n  QueryParams,\n  PathParams,\n>(\n  cacheKey: string | null,\n  cacheTime: number | undefined,\n  requestConfig: RequestConfig<\n    ResponseData,\n    QueryParams,\n    PathParams,\n    RequestBody\n  >,\n): FetchResponse<ResponseData, RequestBody, QueryParams, PathParams> | null {\n  // If cache key or time is not provided, return null\n  if (!cacheKey || cacheTime === undefined || cacheTime === null) {\n    return null;\n  }\n\n  // Check if cache should be bypassed\n  const buster = requestConfig.cacheBuster || defaultConfig.cacheBuster;\n  if (buster && buster(requestConfig)) {\n    return null;\n  }\n\n  if (requestConfig.cache && requestConfig.cache === 'reload') {\n    return null; // Skip cache lookup entirely\n  }\n\n  // Retrieve the cached entry\n  const entry = getCache<ResponseData, RequestBody, QueryParams, PathParams>(\n    cacheKey,\n  );\n\n  if (!entry) {\n    return null;\n  }\n\n  const isExpired = isCacheExpired(entry);\n  const isStale = isCacheStale(entry);\n\n  // If completely expired, delete and return null\n  if (isExpired) {\n    deleteCache(cacheKey);\n    return null;\n  }\n\n  // If fresh (not stale), return immediately\n  if (!isStale) {\n    return entry.data;\n  }\n\n  // SWR: Data is stale but not expired\n  if (isStale && !isExpired) {\n    // Triggering background revalidation here could cause race conditions\n    // So we return stale data immediately and leave it up to implementers to handle revalidation\n    return entry.data;\n  }\n\n  return null;\n}\n\n/**\n * Sets or deletes the response cache based on cache settings and notifies subscribers.\n *\n * @param {FetchResponse<ResponseData, RequestBody, QueryParams, PathParams>} output - The response to cache.\n * @param {RequestConfig<ResponseData, QueryParams, PathParams, RequestBody>} requestConfig - The request configuration.\n * @param {boolean} [isError=false] - Whether the response is an error.\n */\nexport function handleResponseCache<\n  ResponseData = DefaultResponse,\n  RequestBody = DefaultPayload,\n  QueryParams = DefaultParams,\n  PathParams = DefaultUrlParams,\n>(\n  output: FetchResponse<ResponseData, RequestBody, QueryParams, PathParams>,\n  requestConfig: RequestConfig<\n    ResponseData,\n    QueryParams,\n    PathParams,\n    RequestBody\n  >,\n  isError: boolean = false,\n): void {\n  // It is string as it is called once request is made\n  const cacheKey = requestConfig.cacheKey as string;\n\n  if (cacheKey) {\n    const cacheTime = requestConfig.cacheTime;\n    const skipCache = requestConfig.skipCache;\n\n    // Fast path: only set cache if cacheTime is positive and not skipping cache\n    if (\n      cacheTime &&\n      (!isError || requestConfig.cacheErrors) &&\n      !(skipCache && skipCache(output, requestConfig))\n    ) {\n      setCache(cacheKey, output, cacheTime, requestConfig.staleTime);\n    }\n\n    notifySubscribers(cacheKey, output);\n    removeInFlight(cacheKey);\n\n    const prevCacheKey = requestConfig._prevKey;\n\n    if (prevCacheKey) {\n      removeInFlight(prevCacheKey);\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { mutate } from './cache-manager';\nimport {\n  APPLICATION_CONTENT_TYPE,\n  APPLICATION_JSON,\n  CONTENT_TYPE,\n  FUNCTION,\n  OBJECT,\n  STRING,\n} from './constants';\nimport {\n  DefaultResponse,\n  FetchResponse,\n  RequestConfig,\n  ResponseError,\n  DefaultParams,\n  DefaultUrlParams,\n  DefaultPayload,\n} from './types';\nimport { flattenData, isObject, processHeaders } from './utils';\n\n/**\n * Parses the response data based on the Content-Type header.\n *\n * @param response - The Response object to parse.\n * @returns A Promise that resolves to the parsed data.\n */\nexport async function parseResponseData<\n  ResponseData = DefaultResponse,\n  RequestBody = DefaultPayload,\n  QueryParams = DefaultParams,\n  PathParams = DefaultUrlParams,\n>(\n  response: FetchResponse<ResponseData, RequestBody, QueryParams, PathParams>,\n): Promise<any> {\n  // Bail early for HEAD requests or status codes, or any requests that never have a body\n  if (!response || !response.body) {\n    return null;\n  }\n\n  // Get the content-type header once\n  let contentType = (response as Response).headers?.get(CONTENT_TYPE);\n\n  if (contentType) {\n    // Lowercase and trim for consistent matching\n    contentType = contentType.toLowerCase().trim();\n  } else {\n    contentType = '';\n  }\n\n  // Split for mime type without charset\n  const mimeType = contentType.split(';', 1)[0];\n\n  let data;\n\n  try {\n    if (mimeType.includes(APPLICATION_JSON) || mimeType.includes('+json')) {\n      data = await response.json(); // Parse JSON response\n    } else if (\n      (mimeType.includes('multipart/form-data') || // Parse as FormData\n        mimeType.includes(\n          APPLICATION_CONTENT_TYPE + 'x-www-form-urlencoded', // Handle URL-encoded forms\n        )) &&\n      typeof response.formData === FUNCTION\n    ) {\n      data = await response.formData();\n    } else if (\n      mimeType.includes(APPLICATION_CONTENT_TYPE + 'octet-stream') &&\n      typeof response.blob === FUNCTION\n    ) {\n      data = await response.blob(); // Parse as blob\n    } else {\n      data = await response.text();\n\n      if (typeof data === STRING) {\n        const trimmed = data.trim();\n        if (\n          (trimmed.startsWith('{') && trimmed.endsWith('}')) ||\n          (trimmed.startsWith('[') && trimmed.endsWith(']'))\n        ) {\n          try {\n            data = JSON.parse(trimmed);\n          } catch {\n            // leave as text if parsing fails\n          }\n        }\n      }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  } catch (_error) {\n    // Parsing failed, fallback to null\n    data = null;\n  }\n\n  return data;\n}\n\n/**\n * Prepare response object with additional information.\n *\n * @param Response. It may be \"null\" in case of request being aborted.\n * @param {RequestConfig} config - Request config\n * @param error - whether the response is erroneous\n * @returns {FetchResponse<ResponseData, RequestBody, QueryParams, PathParams>} Response data\n */\nexport const prepareResponse = <\n  ResponseData = DefaultResponse,\n  RequestBody = DefaultPayload,\n  QueryParams = DefaultParams,\n  PathParams = DefaultUrlParams,\n>(\n  response: FetchResponse<\n    ResponseData,\n    RequestBody,\n    QueryParams,\n    PathParams\n  > | null,\n  config: RequestConfig<ResponseData, QueryParams, PathParams, RequestBody>,\n  error: ResponseError<\n    ResponseData,\n    RequestBody,\n    QueryParams,\n    PathParams\n  > | null = null,\n): FetchResponse<ResponseData, RequestBody, QueryParams, PathParams> => {\n  const defaultResponse = config.defaultResponse;\n  const cacheKey = config.cacheKey;\n  const mutatator = mutate.bind(null, cacheKey as string) as FetchResponse<\n    ResponseData,\n    RequestBody,\n    QueryParams,\n    PathParams\n  >['mutate'];\n\n  // This may happen when request is cancelled.\n  if (!response) {\n    return {\n      ok: false,\n      // Enhance the response with extra information\n      error,\n      data: defaultResponse ?? null,\n      headers: null,\n      config,\n      mutate: mutatator,\n      isFetching: false,\n    } as unknown as FetchResponse<\n      ResponseData,\n      RequestBody,\n      QueryParams,\n      PathParams\n    >;\n  }\n\n  const isNativeResponse =\n    typeof Response === FUNCTION && response instanceof Response;\n\n  let data = response.data;\n\n  // Set the default response if the provided data is an empty object\n  if (\n    defaultResponse !== undefined &&\n    (data === undefined ||\n      data === null ||\n      (typeof data === OBJECT && Object.keys(data).length === 0))\n  ) {\n    response.data = data = defaultResponse;\n  }\n\n  if (config.flattenResponse) {\n    response.data = data = flattenData(data);\n  }\n\n  if (config.select) {\n    response.data = data = config.select(data);\n  }\n\n  const headers = processHeaders(response.headers);\n\n  // Native fetch Response extended by extra information\n  if (isNativeResponse) {\n    return {\n      body: response.body,\n      bodyUsed: response.bodyUsed,\n      ok: response.ok,\n      redirected: response.redirected,\n      type: response.type,\n      url: response.url,\n      status: response.status,\n      statusText: response.statusText,\n\n      // Convert methods to use arrow functions to preserve correct return types\n      blob: () => response.blob(),\n      json: () => response.json(),\n      text: () => response.text(),\n      clone: () => response.clone(),\n      arrayBuffer: () => response.arrayBuffer(),\n      formData: () => response.formData(),\n      bytes: () => response.bytes(),\n\n      // Enhance the response with extra information\n      error,\n      data,\n      headers,\n      config,\n      mutate: mutatator,\n      isFetching: false,\n    };\n  }\n\n  // If it's a custom fetcher, and it does not return any Response instance, it may have its own internal handler\n  if (isObject(response)) {\n    response.error = error;\n    response.headers = headers;\n    response.isFetching = false;\n    response.mutate = mutatator;\n  }\n\n  return response;\n};\n","import { applyInterceptors } from './interceptor-manager';\nimport type { FetchResponse, RetryConfig, RetryFunction } from './types';\nimport { delayInvocation, timeNow } from './utils';\nimport { generateCacheKey } from './cache-manager';\n\nfunction getMsFromHttpDate(dateString: string): number | null {\n  const ms = Date.parse(dateString) - timeNow();\n\n  if (!isNaN(ms)) {\n    return Math.max(0, Math.floor(ms));\n  }\n  return null;\n}\n\n/**\n * Calculates the number of milliseconds to wait before retrying a request,\n * based on the `Retry-After` HTTP header in the provided response.\n *\n * The function supports both numeric (seconds) and HTTP-date formats for the `Retry-After` header.\n * - If the header is a number, it is interpreted as seconds and converted to milliseconds.\n * - If the header is a date, the function calculates the difference between the date and the current time.\n *\n * @param extendedResponse - The response object containing headers, or `null`.\n * @returns The number of milliseconds to wait before retrying, or `null` if the header is not present or invalid.\n */\nexport function getRetryAfterMs(\n  extendedResponse: FetchResponse | null,\n): number | null {\n  if (!extendedResponse) {\n    return null;\n  }\n\n  const headers = extendedResponse.headers || {};\n  const retryAfter = headers['retry-after'];\n\n  if (retryAfter) {\n    // Try parsing as seconds\n    const seconds = Number(retryAfter);\n\n    if (!isNaN(seconds) && seconds >= 0) {\n      return seconds * 1000;\n    }\n\n    const ms = getMsFromHttpDate(retryAfter);\n\n    if (ms !== null) {\n      return ms;\n    }\n  }\n\n  // Headers are already in lowercase\n  const RATELIMIT_RESET = 'ratelimit-reset';\n\n  // Unix timestamp when the rate limit window resets (relative to current time)\n  // Fallback to checking 'ratelimit-reset-after' OR 'x-ratelimit-reset-after' headers\n  const rateLimitResetAfter =\n    headers[RATELIMIT_RESET + '-after'] ||\n    headers['x-' + RATELIMIT_RESET + '-after'];\n\n  if (rateLimitResetAfter) {\n    const seconds = Number(rateLimitResetAfter);\n\n    if (!isNaN(seconds)) {\n      return seconds * 1000;\n    }\n  }\n\n  // ISO 8601 datetime when the rate limit resets\n  // Fallback to checking 'ratelimit-reset-at' 'x-ratelimit-reset-at' headers\n  const rateLimitResetAt =\n    headers[RATELIMIT_RESET + '-at'] || headers['x-' + RATELIMIT_RESET + '-at'];\n\n  if (rateLimitResetAt) {\n    return getMsFromHttpDate(rateLimitResetAt);\n  }\n\n  return null;\n}\n\n/**\n * Executes a request function with retry logic according to the provided configuration.\n *\n * The function attempts the request up to the specified number of retries, applying delay and backoff strategies.\n * Retries can be triggered based on response status codes, custom logic, or the presence of a `Retry-After` header.\n * Optionally, an `onRetry` interceptor can be invoked before each retry attempt.\n *\n * @typeParam ResponseData - The type of the response data.\n * @typeParam RequestBody - The type of the request body.\n * @typeParam QueryParams - The type of the query parameters.\n * @typeParam PathParams - The type of the path parameters.\n * @param requestFn - The function that performs the request. Receives `isStaleRevalidation` and `attempt` as arguments.\n * @param config - The retry configuration, including retry count, delay, backoff, retry conditions, and hooks.\n * @returns A promise resolving to the fetch response, or rejecting if all retries are exhausted.\n * @throws Error if the maximum number of retries is exceeded or a non-retriable error occurs.\n */\nexport async function withRetry<\n  ResponseData,\n  RequestBody,\n  QueryParams,\n  PathParams,\n>(\n  requestFn: (\n    isStaleRevalidation: boolean,\n    attempt: number,\n  ) => Promise<\n    FetchResponse<ResponseData, RequestBody, QueryParams, PathParams>\n  >,\n  config: RetryConfig<ResponseData, RequestBody, QueryParams, PathParams>,\n): Promise<FetchResponse<ResponseData, RequestBody, QueryParams, PathParams>> {\n  const {\n    retries = 0,\n    delay = 0,\n    backoff = 1,\n    maxDelay,\n    retryOn = [],\n    shouldRetry,\n  } = config;\n\n  let attempt = 0;\n  let waitTime = delay;\n  const maxRetries = retries > 0 ? retries : 0;\n  let output: FetchResponse<ResponseData, RequestBody, QueryParams, PathParams>;\n\n  while (attempt <= maxRetries) {\n    // Subsequent attempts will have output defined, but the first attempt may not.\n    // Let's apply onRetry interceptor and regenerate cache key if ot really changes.\n    if (attempt > 0 && output!) {\n      const cfg = output.config;\n      const onRetry = cfg.onRetry;\n\n      if (onRetry) {\n        await applyInterceptors(onRetry, output, attempt);\n\n        // If the key was automatically generated, we need to regenerate it as config may change.\n        // We don't detect whether config changed for performance reasons.\n        if (cfg._isAutoKey) {\n          cfg._prevKey = cfg.cacheKey as string;\n          cfg.cacheKey = generateCacheKey(cfg, false);\n        }\n      }\n    }\n\n    output = await requestFn(true, attempt); // isStaleRevalidation=false, isFirstAttempt=attempt===0\n    const error = output.error;\n\n    // Check if we should retry based on successful response\n    if (!error) {\n      if (shouldRetry && attempt < maxRetries) {\n        const shouldRetryResult = await shouldRetry(output, attempt);\n\n        if (shouldRetryResult) {\n          await delayInvocation(waitTime);\n          waitTime *= backoff || 1;\n          waitTime = Math.min(waitTime, maxDelay || waitTime);\n          attempt++;\n          continue;\n        }\n      }\n\n      break;\n    }\n\n    // Determine if we should stop retrying\n    const shouldStopRetrying = await getShouldStopRetrying(\n      output,\n      attempt,\n      maxRetries,\n      shouldRetry,\n      retryOn,\n    );\n\n    if (shouldStopRetrying) {\n      break;\n    }\n\n    // If we should not stop retrying, continue to the next attempt\n    // Handle rate limiting if the error status is 429 (Too Many Requests) or 503 (Service Unavailable)\n    if (error.status === 429 || error.status === 503) {\n      // Try to extract the \"Retry-After\" value from the response headers\n      const retryAfterMs = getRetryAfterMs(output);\n\n      // If a valid retry-after value is found, override the wait time before next retry\n      if (retryAfterMs !== null) {\n        waitTime = retryAfterMs;\n      }\n    }\n\n    await delayInvocation(waitTime);\n    waitTime *= backoff || 1;\n    waitTime = Math.min(waitTime, maxDelay || waitTime);\n    attempt++;\n  }\n\n  return output!;\n}\n\n/**\n * Determines whether to stop retrying based on the error, current attempt count, and retry configuration.\n *\n * This function checks:\n * - If the maximum number of retries has been reached.\n * - If a custom `shouldRetry` callback is provided, its result is used to decide.\n * - If no custom logic is provided, falls back to checking if the error status is included in the `retryOn` list.\n *\n * @typeParam ResponseData - The type of the response data.\n * @typeParam RequestBody - The type of the request body.\n * @typeParam QueryParams - The type of the query parameters.\n * @typeParam PathParams - The type of the path parameters.\n * @param output - The response object containing the error and request configuration.\n * @param attempt - The current retry attempt number.\n * @param maxRetries - The maximum number of retry attempts allowed.\n * @param shouldRetry - Optional custom function to determine if a retry should occur.\n * @param retryOn - Optional list of HTTP status codes that should trigger a retry.\n * @returns A promise resolving to `true` if retrying should stop, or `false` to continue retrying.\n */\nexport async function getShouldStopRetrying<\n  ResponseData,\n  RequestBody,\n  QueryParams,\n  PathParams,\n>(\n  output: FetchResponse<ResponseData, RequestBody, QueryParams, PathParams>,\n  attempt: number,\n  maxRetries: number,\n  shouldRetry?: RetryFunction<\n    ResponseData,\n    RequestBody,\n    QueryParams,\n    PathParams\n  > | null,\n  retryOn: number[] = [],\n): Promise<boolean> {\n  // Safety first: always respect max retries\n  // We check retries provided regardless of the shouldRetry being provided so to avoid infinite loops.\n  // It is a fail-safe so to prevent excessive retry attempts even if custom retry logic suggests a retry.\n  if (attempt === maxRetries) {\n    return true;\n  }\n\n  let customDecision: boolean | null = null;\n\n  // Get custom decision if shouldRetry is provided\n  if (shouldRetry) {\n    const result = await shouldRetry(output, attempt);\n    customDecision = result;\n\n    // Decision cascade:\n    if (customDecision !== null) {\n      return !customDecision;\n    }\n  }\n\n  return !(retryOn || []).includes(output.error?.status ?? 0);\n}\n","import type { RequestConfig, FetchResponse } from './types';\nimport { delayInvocation } from './utils';\n\n/**\n * Executes a request function with polling, stopping when shouldStopPolling returns true,\n * pollingInterval is not set, or maxAttempts is reached.\n *\n * @template Output The type of the output returned by the request function.\n * @param requestFn - The function that performs a single request (with retries).\n * @param pollingInterval - Interval in ms between polling attempts.\n * @param shouldStopPolling - Function to determine if polling should stop.\n * @param maxAttempts - Maximum number of polling attempts, default: 0 (unlimited).\n * @param pollingDelay - Delay in ms before each polling attempt, default: 0.\n * @returns The final output from the last request.\n */\nexport async function withPolling<\n  ResponseData,\n  RequestBody,\n  QueryParams,\n  PathParams,\n>(\n  requestFn: (\n    isStaleRevalidation?: boolean,\n    attempt?: number,\n  ) => Promise<\n    FetchResponse<ResponseData, RequestBody, QueryParams, PathParams>\n  >,\n  pollingInterval?: RequestConfig['pollingInterval'],\n  shouldStopPolling?: RequestConfig['shouldStopPolling'],\n  maxAttempts = 0,\n  pollingDelay = 0,\n): Promise<FetchResponse<ResponseData, RequestBody, QueryParams, PathParams>> {\n  if (!pollingInterval) {\n    return requestFn();\n  }\n\n  let pollingAttempt = 0;\n  let output: FetchResponse<ResponseData, RequestBody, QueryParams, PathParams>;\n\n  while (maxAttempts === 0 || pollingAttempt < maxAttempts) {\n    if (pollingDelay > 0) {\n      await delayInvocation(pollingDelay);\n    }\n\n    output = await requestFn();\n\n    pollingAttempt++;\n\n    if (\n      (maxAttempts > 0 && pollingAttempt >= maxAttempts) ||\n      !pollingInterval ||\n      (shouldStopPolling && shouldStopPolling(output, pollingAttempt))\n    ) {\n      break;\n    }\n\n    await delayInvocation(pollingInterval);\n  }\n\n  return output!;\n}\n","import type { ResponseError } from './errors/response-error';\nimport type {\n  DefaultResponse,\n  FetchResponse,\n  RequestConfig,\n} from './types/request-handler';\nimport { applyInterceptors } from './interceptor-manager';\nimport { handleResponseCache } from './cache-manager';\nimport { ABORT_ERROR, REJECT } from './constants';\nimport { DefaultParams, DefaultUrlParams, DefaultPayload } from './types';\n\n/**\n * Handles final processing for both success and error responses\n * Applies error interceptors, caching, notifications, and error strategy\n */\nexport async function withErrorHandling<\n  ResponseData = DefaultResponse,\n  RequestBody = DefaultPayload,\n  QueryParams = DefaultParams,\n  PathParams = DefaultUrlParams,\n>(\n  isStaleRevalidation: boolean,\n  requestFn: (\n    isStaleRevalidation: boolean,\n  ) => Promise<\n    FetchResponse<ResponseData, RequestBody, QueryParams, PathParams>\n  >,\n  requestConfig: RequestConfig<\n    ResponseData,\n    QueryParams,\n    PathParams,\n    RequestBody\n  >,\n): Promise<FetchResponse<ResponseData, RequestBody, QueryParams, PathParams>> {\n  const output = await requestFn(isStaleRevalidation);\n  const error = output.error;\n\n  if (!error) {\n    // SUCCESS PATH\n    handleResponseCache(output, requestConfig);\n\n    return output;\n  }\n\n  // ERROR PATH\n\n  if (requestConfig.onError) {\n    await applyInterceptors(requestConfig.onError, error);\n  }\n\n  // Timeouts and request cancellations using AbortController do not throw any errors unless rejectCancelled is true.\n  // Only handle the error if the request was not cancelled, or if it was cancelled and rejectCancelled is true.\n  const isCancelled = error.isCancelled;\n\n  if (!isCancelled && requestConfig.logger) {\n    logger(requestConfig, 'FETCH ERROR', error as ResponseError);\n  }\n\n  // Handle cache and notifications FIRST (before strategy)\n  handleResponseCache(output, requestConfig, true);\n\n  // handle error strategy as the last part\n  const shouldHandleError = !isCancelled || requestConfig.rejectCancelled;\n\n  if (shouldHandleError) {\n    const strategy = requestConfig.strategy;\n    // Reject the promise\n    if (strategy === REJECT) {\n      return Promise.reject(error);\n    }\n\n    // Hang the promise\n    if (strategy === 'silent') {\n      await new Promise(() => null);\n    }\n  }\n\n  return output;\n}\n\nexport function enhanceError<\n  ResponseData = DefaultResponse,\n  RequestBody = DefaultPayload,\n  QueryParams = DefaultParams,\n  PathParams = DefaultUrlParams,\n>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error: any,\n  response: FetchResponse<\n    ResponseData,\n    RequestBody,\n    QueryParams,\n    PathParams\n  > | null,\n  requestConfig: RequestConfig<\n    ResponseData,\n    QueryParams,\n    PathParams,\n    RequestBody\n  >,\n): void {\n  error.status = error.status || response?.status || 0;\n  error.statusText = error.statusText || response?.statusText || '';\n  error.config = error.request = requestConfig;\n  error.response = response;\n  error.isCancelled = error.name === ABORT_ERROR;\n}\n\n/**\n * Logs messages or errors using the configured logger's `warn` method.\n *\n * @param {RequestConfig} reqConfig - Request config passed when making the request\n * @param {...(string | ResponseError<any>)} args - Messages or errors to log.\n */\nfunction logger(\n  reqConfig: RequestConfig,\n  ...args: (string | ResponseError)[]\n): void {\n  const logger = reqConfig.logger;\n\n  if (logger && logger.warn) {\n    logger.warn(...args);\n  }\n}\n","import type {\n  DefaultResponse,\n  RequestConfig,\n  FetchResponse,\n} from './types/request-handler';\nimport type {\n  DefaultParams,\n  DefaultPayload,\n  DefaultUrlParams,\n} from './types/api-handler';\nimport { applyInterceptors } from './interceptor-manager';\nimport { ResponseError } from './errors/response-error';\nimport { isObject } from './utils';\nimport {\n  markInFlight,\n  setInFlightPromise,\n  getInFlightPromise,\n} from './inflight-manager';\nimport { parseResponseData, prepareResponse } from './response-parser';\nimport { generateCacheKey, getCachedResponse, setCache } from './cache-manager';\nimport { withRetry } from './retry-handler';\nimport { withPolling } from './polling-handler';\nimport { notifySubscribers } from './pubsub-manager';\nimport { addRevalidator } from './revalidator-manager';\nimport { enhanceError, withErrorHandling } from './error-handler';\nimport { FUNCTION } from './constants';\nimport { buildConfig } from './config-handler';\n\nconst inFlightResponse = {\n  isFetching: true,\n};\n\n/**\n * Sends an HTTP request to the specified URL using the provided configuration and returns a typed response.\n *\n * @typeParam ResponseData - The expected shape of the response data. Defaults to `DefaultResponse`.\n * @typeParam RequestBody - The type of the request payload/body. Defaults to `DefaultPayload`.\n * @typeParam QueryParams - The type of the query parameters. Defaults to `DefaultParams`.\n * @typeParam PathParams - The type of the path parameters. Defaults to `DefaultUrlParams`.\n *\n * @param url - The endpoint URL to which the request will be sent.\n * @param config - Optional configuration object for the request, including headers, method, body, query, and path parameters.\n *\n * @returns A promise that resolves to a `FetchResponse` containing the typed response data and request metadata.\n *\n * @example\n * ```typescript\n * const { data } = await fetchf<UserData>('/api/user', { method: 'GET' });\n * console.log(data);\n * ```\n */\nexport async function fetchf<\n  ResponseData = DefaultResponse,\n  RequestBody = DefaultPayload,\n  QueryParams = DefaultParams,\n  PathParams = DefaultUrlParams,\n>(\n  url: string,\n  reqConfig: RequestConfig<\n    ResponseData,\n    QueryParams,\n    PathParams,\n    RequestBody\n  > | null = null,\n): Promise<FetchResponse<ResponseData, RequestBody, QueryParams, PathParams>> {\n  const fetcherConfig = buildConfig<\n    ResponseData,\n    RequestBody,\n    QueryParams,\n    PathParams\n  >(url, reqConfig);\n\n  const {\n    timeout,\n    cancellable,\n    cacheKey,\n    dedupeTime,\n    cacheTime,\n    staleTime,\n    refetchOnFocus,\n    refetchOnReconnect,\n    pollingInterval = 0,\n  } = fetcherConfig;\n  const isCacheEnabled = cacheTime !== undefined || staleTime !== undefined;\n\n  const needsCacheKey = !!(\n    cacheKey ||\n    timeout ||\n    dedupeTime ||\n    isCacheEnabled ||\n    cancellable ||\n    refetchOnFocus ||\n    refetchOnReconnect\n  );\n\n  let _cacheKey: string | null = null;\n\n  // Generate cache key if required\n  if (needsCacheKey) {\n    _cacheKey = generateCacheKey(fetcherConfig);\n  }\n\n  // Cache handling logic\n  if (_cacheKey && isCacheEnabled) {\n    const cached = getCachedResponse<\n      ResponseData,\n      RequestBody,\n      QueryParams,\n      PathParams\n    >(_cacheKey, cacheTime, fetcherConfig);\n\n    if (cached) {\n      return cached;\n    }\n  }\n\n  // Deduplication logic\n  if (_cacheKey && dedupeTime) {\n    const inflight = getInFlightPromise<\n      FetchResponse<ResponseData, RequestBody, QueryParams, PathParams>\n    >(_cacheKey, dedupeTime);\n\n    if (inflight) {\n      return inflight;\n    }\n  }\n\n  const retryConfig = fetcherConfig.retry || {};\n  const { retries = 0, resetTimeout } = retryConfig;\n\n  // The actual request logic as a function (one poll attempt, with retries)\n  const doRequestOnce = async (isStaleRevalidation = false, attempt = 0) => {\n    // If cache key is specified, we will handle optimistic updates\n    // and mark the request as in-flight, so to catch \"fetching\" state.\n    // This is useful for Optimistic UI updates (e.g., showing loading spinners).\n    if (!attempt) {\n      if (_cacheKey && !isStaleRevalidation) {\n        if (staleTime) {\n          const existingCache = getCachedResponse(\n            _cacheKey,\n            cacheTime,\n            fetcherConfig,\n          );\n\n          // Don't notify subscribers when cache exists\n          // Let them continue showing stale data during background revalidation\n          if (!existingCache) {\n            setCache(_cacheKey, inFlightResponse, cacheTime, staleTime);\n            notifySubscribers(_cacheKey, inFlightResponse);\n          }\n        } else {\n          notifySubscribers(_cacheKey, inFlightResponse);\n        }\n      }\n\n      // Attach cache key so that it can be reused in interceptors or in the final response\n      fetcherConfig.cacheKey = _cacheKey;\n    }\n\n    const url = fetcherConfig.url as string;\n\n    // Add the request to the queue. Make sure to handle deduplication, cancellation, timeouts in accordance to retry settings\n    const controller = markInFlight(\n      _cacheKey,\n      url,\n      timeout,\n      dedupeTime || 0,\n      !!cancellable,\n      // Enable timeout either by default or when retries & resetTimeout are enabled\n      !!(timeout && (!attempt || resetTimeout)),\n    );\n\n    // Do not create a shallow copy to maintain idempotency here.\n    // This ensures the original object is mutated by interceptors whenever needed, including retry logic.\n    const requestConfig = fetcherConfig;\n\n    requestConfig.signal = controller.signal;\n\n    let output: FetchResponse<\n      ResponseData,\n      RequestBody,\n      QueryParams,\n      PathParams\n    >;\n    let response: FetchResponse<\n      ResponseData,\n      RequestBody,\n      QueryParams,\n      PathParams\n    > | null = null;\n\n    try {\n      if (fetcherConfig.onRequest) {\n        await applyInterceptors(fetcherConfig.onRequest, requestConfig);\n      }\n\n      // Custom fetcher\n      const fn = fetcherConfig.fetcher;\n\n      response = (fn\n        ? await fn<ResponseData, RequestBody, QueryParams, PathParams>(\n            url,\n            requestConfig,\n          )\n        : await fetch(\n            url,\n            requestConfig as RequestInit,\n          )) as unknown as FetchResponse<\n        ResponseData,\n        RequestBody,\n        QueryParams,\n        PathParams\n      >;\n\n      if (isObject(response)) {\n        // Case 1: Native Response instance\n        if (typeof Response === FUNCTION && response instanceof Response) {\n          response.data = await parseResponseData(response);\n        } else if (fn) {\n          // Case 2: Custom fetcher that returns a response object\n          if (!('data' in response && 'body' in response)) {\n            // Case 3: Raw data, wrap it\n            response = { data: response } as unknown as FetchResponse<\n              ResponseData,\n              RequestBody,\n              QueryParams,\n              PathParams\n            >;\n          }\n        }\n\n        // Attach config and data to the response\n        // This is useful for custom fetchers that do not return a Response instance\n        // and for interceptors that may need to access the request config\n        response.config = requestConfig;\n\n        // Check if the response status is not outside the range 200-299 and if so, output error\n        // This is the pattern for fetch responses as per spec, but custom fetchers may not follow it so we check for `ok` property\n        if (response.ok !== undefined && !response.ok) {\n          throw new ResponseError(\n            `${requestConfig.method} to ${url} failed! Status: ${response.status || null}`,\n            requestConfig,\n            response,\n          );\n        }\n      }\n\n      output = prepareResponse<\n        ResponseData,\n        RequestBody,\n        QueryParams,\n        PathParams\n      >(response, requestConfig);\n\n      const onResponse = fetcherConfig.onResponse;\n\n      if (onResponse) {\n        await applyInterceptors(onResponse, output);\n      }\n    } catch (_error) {\n      const error = _error as ResponseError<\n        ResponseData,\n        RequestBody,\n        QueryParams,\n        PathParams\n      >;\n\n      // Append additional information to Network, CORS or any other fetch() errors\n      enhanceError<ResponseData, RequestBody, QueryParams, PathParams>(\n        error,\n        response,\n        requestConfig,\n      );\n\n      // Prepare Extended Response\n      output = prepareResponse<\n        ResponseData,\n        RequestBody,\n        QueryParams,\n        PathParams\n      >(response, requestConfig, error);\n    }\n\n    return output;\n  };\n\n  // Inline and minimize function wrappers for performance\n  const baseRequest =\n    retries > 0 ? () => withRetry(doRequestOnce, retryConfig) : doRequestOnce;\n\n  const requestWithErrorHandling = (isStaleRevalidation = false) =>\n    withErrorHandling<ResponseData, RequestBody, QueryParams, PathParams>(\n      isStaleRevalidation,\n      baseRequest,\n      fetcherConfig,\n    );\n\n  // Avoid unnecessary function wrapping if polling is not enabled\n  const doRequestPromise = pollingInterval\n    ? withPolling<ResponseData, RequestBody, QueryParams, PathParams>(\n        requestWithErrorHandling,\n        pollingInterval,\n        fetcherConfig.shouldStopPolling,\n        fetcherConfig.maxPollingAttempts,\n        fetcherConfig.pollingDelay,\n      )\n    : requestWithErrorHandling();\n\n  // If deduplication is enabled, store the in-flight promise immediately\n  if (_cacheKey) {\n    if (dedupeTime) {\n      setInFlightPromise(_cacheKey, doRequestPromise);\n    }\n\n    addRevalidator(\n      _cacheKey,\n      requestWithErrorHandling,\n      undefined,\n      staleTime,\n      requestWithErrorHandling,\n      !!refetchOnFocus,\n      !!refetchOnReconnect,\n    );\n  }\n\n  return doRequestPromise;\n}\n","import type {\n  ApiHandlerConfig,\n  ApiHandlerDefaultMethods,\n  ApiHandlerMethods,\n  RequestConfigUrlRequired,\n} from './types/api-handler';\nimport { fetchf } from '.';\nimport { mergeConfigs } from './config-handler';\nimport { isAbsoluteUrl } from './utils';\n\n/**\n * Creates an instance of API Handler.\n * It creates an API fetcher function using native fetch() or a custom fetcher if passed as \"fetcher\".\n * @see https://github.com/MattCCC/fetchff#configuration\n *\n * @param {Object} config - Configuration object for the API fetcher (see link above for full options).\n * @param {Object} config.endpoints - An object containing endpoint definitions.\n * @param {string} [config.baseURL] - The base URL for the API.\n * @param {Object} [config.headers] - Optional default headers to include in every request.\n * @param {Function} [config.onError] - Optional callback function for handling errors.\n * @returns API handler functions and endpoints to call\n *\n * @example\n * // Define endpoint paths\n * const endpoints = {\n *   getUser: '/user',\n *   createPost: '/post',\n * };\n *\n * // Create the API fetcher with configuration\n * const api = createApiFetcher({\n *   endpoints,\n *   apiUrl: 'https://example.com/api',\n *   onError(error) {\n *     console.log('Request failed', error);\n *   },\n *   headers: {\n *     'my-auth-key': 'example-auth-key-32rjjfa',\n *   },\n * });\n *\n * // Fetch user data\n * const response = await api.getUser({ userId: 1, ratings: [1, 2] })\n */\nfunction createApiFetcher<\n  EndpointTypes extends object,\n  EndpointsSettings = never,\n>(config: ApiHandlerConfig<EndpointTypes>) {\n  const endpoints = config.endpoints;\n\n  /**\n   * Triggered when trying to use non-existent endpoints\n   *\n   * @param endpointName Endpoint Name\n   * @returns {Promise}\n   */\n  function handleNonImplemented(endpointName: string): Promise<null> {\n    console.error(`Add ${endpointName} to 'endpoints'.`);\n\n    return Promise.resolve(null);\n  }\n\n  const apiHandler: ApiHandlerDefaultMethods<EndpointTypes> = {\n    config,\n    endpoints,\n    /**\n     * Handle Single API Request\n     * It considers settings in following order: per-request settings, global per-endpoint settings, global settings.\n     *\n     * @param endpointName - The name of the API endpoint to call.\n     * @param requestConfig - Additional configuration for the request.\n     * @returns A promise that resolves with the response from the API provider.\n     */\n    async request(endpointName, requestConfig = {}) {\n      // Use global and per-endpoint settings\n      const endpointConfig = endpoints[endpointName];\n      const _endpointConfig =\n        endpointConfig ||\n        ({ url: String(endpointName) } as RequestConfigUrlRequired);\n      const url = _endpointConfig.url;\n\n      // Block Protocol-relative URLs as they could lead to SSRF (Server-Side Request Forgery)\n      if (url.startsWith('//')) {\n        throw new Error('Protocol-relative URLs are not allowed.');\n      }\n\n      // Prevent potential Server-Side Request Forgery attack and leakage of credentials when same instance is used for external requests\n      const mergedConfig = isAbsoluteUrl(url)\n        ? // Merge endpoints configs for absolute URLs only if urls match\n          endpointConfig?.url === url\n          ? mergeConfigs(_endpointConfig, requestConfig)\n          : requestConfig\n        : mergeConfigs(mergeConfigs(config, _endpointConfig), requestConfig);\n\n      // We prevent potential Server-Side Request Forgery attack and leakage of credentials as the same instance is not used for external requests\n      // Retrigger fetch to ensure completely new instance of handler being triggered for external URLs\n      return fetchf(url, mergedConfig);\n    },\n  };\n\n  /**\n   * Maps all API requests using native Proxy\n   *\n   * @param {*} prop          Caller\n   */\n  return new Proxy<ApiHandlerMethods<EndpointTypes, EndpointsSettings>>(\n    apiHandler as ApiHandlerMethods<EndpointTypes, EndpointsSettings>,\n    {\n      get(_target, prop: string) {\n        if (prop in apiHandler) {\n          return apiHandler[prop as unknown as keyof typeof apiHandler];\n        }\n\n        // Prevent handler from triggering non-existent endpoints\n        if (endpoints[prop]) {\n          return apiHandler.request.bind(null, prop);\n        }\n\n        return handleNonImplemented.bind(null, prop);\n      },\n    },\n  );\n}\n\nexport { createApiFetcher };\n"]}